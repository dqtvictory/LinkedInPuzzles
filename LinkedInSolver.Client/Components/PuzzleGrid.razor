@using LinkedInSolver.Client.Models

<style>
    .grid-container {
        display: flex;
        justify-content: center;
        margin-top: 24px;
    }
    
    .puzzle-grid-wrapper {
        position: relative;
        width: fit-content;
    }
    
    .puzzle-grid {
        display: grid;
        gap: 1px;
        background-color: #dee2e6;
        border: 2px solid #dee2e6;
        border-radius: 8px;
        padding: 8px;
        width: fit-content;
        aspect-ratio: 1;
    }
    
    .grid-cell {
        background-color: white;
        border: 1px solid #e9ecef;
        cursor: pointer;
        transition: all 0.2s ease;
        border-radius: 2px;
        min-height: 60px;
        min-width: 60px;
        width: 60px;
        height: 60px;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
    }
    
    .grid-cell.right-wall {
        border-right: 2px solid #000 !important;
    }
    
    .grid-cell.bottom-wall {
        border-bottom: 2px solid #000 !important;
    }
    
    .grid-cell.left-wall {
        border-left: 2px solid #000 !important;
    }
    
    .grid-cell.top-wall {
        border-top: 2px solid #000 !important;
    }
    
    .cell-number {
        font-size: 20px;
        font-weight: bold;
        color: #333;
        user-select: none;
    }
    
    .cell-number.first-last {
        color: #dc3545 !important;
    }
    
    .border-button {
        position: absolute;
        width: 24px;
        height: 24px;
        background-color: #90EE90;
        border: 2px solid #90EE90;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        opacity: 0;
        transition: opacity 0.2s ease;
        z-index: 10;
    }
    
    .border-button:hover {
        opacity: 1 !important;
        background-color: #7FDD7F;
    }
    
    .plus-icon {
        color: #A9A9A9;
        font-size: 16px;
        font-weight: bold;
        line-height: 1;
    }
    
    .debug-message {
        margin-top: 16px;
        padding: 8px;
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        font-family: monospace;
        text-align: center;
    }
    
    .grid-cell:hover {
        background-color: #f8f9fa;
        transform: scale(0.95);
    }
    
    .grid-cell.active {
        background-color: #dc3545;
        border-color: #b02a37;
    }
    
    .grid-cell.active:hover {
        background-color: #c82333;
    }
</style>

<PageTitle>@CurrentPuzzle.Name - LinkedIn Puzzles</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">

    <MudBreadcrumbs Items="breadcrumbItems" Class="mb-4" />

    <div class="d-flex align-center mb-4">
        <img src="@CurrentPuzzle.Icon" alt="@CurrentPuzzle.Name" style="width: 48px; height: 48px; margin-right: 16px;" />
        <MudText Typo="Typo.h4" GutterBottom="false">
            @CurrentPuzzle.Name
        </MudText>
    </div>

    <div class="d-flex justify-center mb-4">
        <div class="d-flex align-center">
            <MudTextField @bind-Value="gridSizeInput" 
                        Label="Grid Size" 
                        Variant="Variant.Outlined" 
                        Margin="Margin.Dense"
                        Style="width: 120px; margin-right: 16px;"
                        Error="@showError"
                        ErrorText="@errorMessage"
                        T="int" />
            <MudButton Variant="Variant.Filled" 
                    Color="Color.Primary" 
                    @onclick="OnResizeGrid">
                New Grid
            </MudButton>
        </div>
    </div>

    <div class="grid-container">
        <div class="puzzle-grid-wrapper">
            <div class="puzzle-grid" style="grid-template-columns: repeat(@CurrentGrid.Size, 1fr); grid-template-rows: repeat(@CurrentGrid.Size, 1fr);">
                @for (int i = 0; i < CurrentGrid.Size * CurrentGrid.Size; i++)
                {
                    var row = i / CurrentGrid.Size;
                    var col = i % CurrentGrid.Size; 
                    var pos = new Pos(row, col);
                    
                    var wallClasses = new List<string>();
                    
                    // Only add wall classes if this is a ZipGrid
                    if (CurrentGrid is ZipGrid zipGrid)
                    {
                        if (zipGrid.GetHasRightWall(pos)) wallClasses.Add("right-wall");
                        if (zipGrid.GetHasBottomWall(pos)) wallClasses.Add("bottom-wall");

                        // Add corresponding walls on adjacent cells to avoid holes
                        if (col > 0 && zipGrid.GetHasRightWall(pos.GetNeighbor(Pos.Direction.Left))) wallClasses.Add("left-wall");
                        if (row > 0 && zipGrid.GetHasBottomWall(pos.GetNeighbor(Pos.Direction.Up))) wallClasses.Add("top-wall");
                    }
                    
                    // Determine if cell is active based on puzzle type
                    bool isActive = CurrentGrid switch
                    {
                        QueensGrid queensGrid => queensGrid.GetIsActive(pos),
                        TangoGrid tangoGrid => tangoGrid.GetIsActive(pos),
                        _ => false
                    };
                    
                    var cellClasses = $"grid-cell {(isActive ? "active" : "")} {string.Join(" ", wallClasses)}";
                    
                    <div class="@cellClasses" 
                        @onclick="() => OnCellClick(pos)">
                        @if (CurrentGrid is ZipGrid zipGridForNumber)
                        {
                            if (zipGridForNumber.HasNumber(pos))
                            {
                                var cellNumber = zipGridForNumber.GetCellNumber(pos);
                                var maxNumber = zipGridForNumber.GetMaxNumber();
                                var isFirstOrLast = cellNumber == 1 || cellNumber == maxNumber;
                                <span class="cell-number @(isFirstOrLast ? "first-last" : "")">@cellNumber</span>
                            }
                        }
                    </div>
                    
                    <!-- Border action buttons for this cell position -->
                    @if (CurrentGrid.HasBorderActions)
                    {
                        // Horizontal border button (below current cell)
                        if (row < CurrentGrid.Size - 1)
                        {
                            <div class="border-button horizontal" 
                                style="top: @((row + 1) * 62 + 8 - 12)px; left: @(col * 62 + 8 + 30 - 12)px;"
                                @onclick="() => OnBorderClick(pos, pos.GetNeighbor(Pos.Direction.Down))">
                                <span class="plus-icon">+</span>
                            </div>
                        }
                        
                        // Vertical border button (right of current cell)
                        if (col < CurrentGrid.Size - 1)
                        {
                            <div class="border-button vertical" 
                                style="top: @(row * 62 + 8 + 30 - 12)px; left: @((col + 1) * 62 + 8 - 12)px;"
                                @onclick="() => OnBorderClick(pos, pos.GetNeighbor(Pos.Direction.Right))">
                                <span class="plus-icon">+</span>
                            </div>
                        }
                    }
                }
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(debugMessage))
    {
        <div class="debug-message">
            @debugMessage
        </div>
    }

</MudContainer>

@code {
    [Parameter] public EventCallback<Grid> OnGridChanged { get; set; }
    [Parameter] public Puzzle CurrentPuzzle { get; set; } = null!;
    [Parameter] public Grid CurrentGrid { get; set; } = null!;

    private int gridSizeInput = Grid.DEFAULT_SIZE;
    private bool showError = false;
    private string errorMessage = string.Empty;
    private string debugMessage = string.Empty;
    private List<BreadcrumbItem> breadcrumbItems = null!;

    protected override void OnInitialized()
    {
        gridSizeInput = Grid.DEFAULT_SIZE;
        breadcrumbItems = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", href: "/", icon: Icons.Material.Filled.Home),
            new BreadcrumbItem(CurrentPuzzle.Name, href: null, disabled: true)
        };
        Initialize();
    }

    private async Task OnResizeGrid()
    {   
        if (gridSizeInput < Grid.MIN_SIZE || gridSizeInput > Grid.MAX_SIZE)
        {
            showError = true;
            errorMessage = $"Grid Size should be between {Grid.MIN_SIZE} and {Grid.MAX_SIZE}";
            StateHasChanged();
            return;
        }

        Initialize();
        CurrentGrid.Resize(gridSizeInput);
        await OnGridChanged.InvokeAsync(CurrentGrid);
        StateHasChanged();
    }

    private void Initialize()
    {
        showError = false;
        errorMessage = string.Empty;
        debugMessage = string.Empty;
    }

    private void OnCellClick(Pos pos)
    {
        // Use polymorphic method - each grid type handles its own logic
        CurrentGrid.OnCellClick(pos);
        StateHasChanged();
    }

    private void OnBorderClick(Pos pos1, Pos pos2)
    {
        if (!CurrentGrid.HasBorderActions)
        {
            return;
        }
        CurrentGrid.OnBorderClick(pos1, pos2);
        debugMessage = $"{CurrentPuzzle.Name}: Border action between {pos1} and {pos2}";
        StateHasChanged();
    }
}
