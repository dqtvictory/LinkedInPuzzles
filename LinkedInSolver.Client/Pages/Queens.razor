@page "/queens"
@using LinkedInSolver.Client.Components
@using LinkedInSolver.Client.Models

<style>
    .region-selector {
        display: flex;
        justify-content: center;
        margin: 20px 0;
        gap: 8px;
        flex-wrap: wrap;
    }

    .region-button {
        width: 50px;
        height: 50px;
        border: 2px solid #333;
        border-radius: 8px;
        font-size: 18px;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .region-button:hover {
        transform: scale(1.1);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .region-button.selected {
        border-width: 4px;
        transform: scale(1.15);
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);
    }

    .active-region-display {
        text-align: center;
        margin: 10px 0;
        font-size: 18px;
        font-weight: bold;
        color: #333;
    }

    .queen-solution {
        font-size: 24px;
        color: #99830b;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
    }
</style>

<PuzzleGrid CurrentPuzzle="Puzzle" CurrentGrid="_grid" PageOnCellClick="OnCellClick"
            PageGetCellBgColor="GetCellBgColor" PageGetCellContent="GetCellContent"
            PageOnSolutionFound="OnSolutionFound"/>

<div class="region-selector">
    @for (var i = 0; i < RegionColors.Length; i++)
    {
        var region = i; // Capture for closure
        <button class="region-button @(region == _activeRegion ? "selected" : "")"
                style="background-color: @RegionColors[region]"
                @onclick="() => SetActiveRegion(region)">
            @region
        </button>
    }
</div>

<div class="active-region-display">
    Active region: <span style="color: @RegionColors[_activeRegion]; font-weight: bold;">@_activeRegion</span>
</div>

@code {
    private static readonly Puzzle Puzzle = Puzzle.GetPuzzle("Queens");

    /// <summary>
    ///     Array of colors representing different regions. The array's length ultimately determines the number of
    ///     regions available
    /// </summary>
    private static readonly string[] RegionColors =
    [
        "#eeeeee", // 0 - White
        "#ff7b60", // 1 - Red
        "#e6f388", // 2 - Light Green
        "#bba3e2", // 3 - Light Purple
        "#b9b29e", // 4 - Dark Grey
        "#b3dfa0", // 5 - Green
        "#ffc992", // 6 - Light Orange
        "#96beff", // 7 - Blue
        "#e354b1", // 8 - Pink
        "#80f2ed" // 9 - Light Cyan
    ];

    /// <summary>
    ///     The grid for the Queens puzzle
    /// </summary>
    private readonly QueensGrid _grid = new(Grid.DefaultSize);

    /// <summary>
    ///     Currently active region index in the UI
    /// </summary>
    private int _activeRegion;

    private void SetActiveRegion(int region)
    {
        _activeRegion = region;
        StateHasChanged();
    }

    private void OnCellClick(Pos pos)
    {
        _grid.SetRegionForCell(pos, _activeRegion);
    }

    private string GetCellBgColor(Pos pos)
    {
        var region = _grid.GetRegionForCell(pos);
        return RegionColors[region];
    }

    private RenderFragment? GetCellContent(Pos pos)
    {
        if (_grid.Solution is HashSet<Pos> solution && solution.Contains(pos))
            return @<span class="queen-solution">â™›</span>;
        return null;
    }

    private void OnSolutionFound(List<Pos> solution)
    {
        _grid.Solution = solution.ToHashSet();
    }

}
