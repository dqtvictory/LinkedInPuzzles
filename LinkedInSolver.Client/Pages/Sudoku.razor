@page "/sudoku"
@using System.Diagnostics
@using LinkedInSolver.Client.Components
@using LinkedInSolver.Client.Models

<style>
    .grid-cell.right-wall {
        border-right: 2px solid #000 !important;
    }

    .grid-cell.bottom-wall {
        border-bottom: 2px solid #000 !important;
    }

    .grid-cell.left-wall {
        border-left: 2px solid #000 !important;
    }

    .grid-cell.top-wall {
        border-top: 2px solid #000 !important;
    }

    .cell-number {
        font-size: 20px;
        font-weight: bold;
        color: #333;
        user-select: none;
    }

    .number-selector {
        display: flex;
        justify-content: center;
        margin: 20px 0;
        gap: 8px;
        flex-wrap: wrap;
    }

    .number-selector-button {
        width: 50px;
        height: 50px;
        border: 2px solid #333;
        border-radius: 8px;
        font-size: 18px;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .number-selector-button:hover {
        transform: scale(1.1);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .number-selector-button.selected {
        border-width: 4px;
        transform: scale(1.15);
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);
    }
</style>

<PuzzleGrid CurrentPuzzle="Puzzle" CurrentGrid="_grid"
            PageGetCellBgColor="GetCellBgColor" PageGetCellClasses="GetCellClasses"
            PageGetCellContent="GetCellContent" PageOnCellClick="OnCellClick"
            PageOnSolutionFound="OnSolutionFound"/>

<div class="number-selector">
    @for (var i = 1; i <= 6; i++)
    {
        var num = i; // Capture for closure
        <button class="number-selector-button @(num == _activeNum ? "selected" : "")"
                @onclick="() => SetActiveNumber(num)">
            @num
        </button>
    }
</div>

@code {
    private static readonly Puzzle Puzzle = Puzzle.GetPuzzle("Mini Sudoku");

    /// <summary>
    ///     The grid for the Mini Sudoku puzzle
    /// </summary>
    private readonly SudokuGrid _grid = new(Grid.DefaultSize);

    /// <summary>
    ///     Currently active number in the UI
    /// </summary>
    private int _activeNum;

    private void SetActiveNumber(int number)
    {
        _activeNum = number;
        StateHasChanged();
    }

    private string GetCellBgColor(Pos pos)
    {
        return _grid.HasNumber(pos) ? "#EEEEEE" : "#FFFFFF";
    }

    private List<string> GetCellClasses(Pos pos)
    {
        var classes = new List<string>();

        if (CellHasRightWall(pos))
        {
            classes.Add("right-wall");
        }

        if (CellHasBottomWall(pos))
        {
            classes.Add("bottom-wall");
        }

        if (pos.Col > 0 && CellHasRightWall(pos.GetNeighbor(Pos.Direction.Left)))
        {
            classes.Add("left-wall");
        }

        if (pos.Row > 0 && CellHasBottomWall(pos.GetNeighbor(Pos.Direction.Up)))
        {
            classes.Add("top-wall");
        }

        return classes;
    }

    private RenderFragment? GetCellContent(Pos pos)
    {
        if (_grid.HasNumber(pos))
        {
            return @<span class="cell-number">@_grid.GetCellNumber(pos)</span>;
        }

        if (_grid.HasSolutionAt(pos))
        {
            return @<span class="cell-number">@_grid.GetCellNumberFromSolution(pos)</span>;
        }

        // Neither an assigned number nor a solution, a solution must not yet be available
        Debug.Assert(!_grid.HasSolution(), "Invalid solution");
        return null;
    }

    private void OnCellClick(Pos pos)
    {
        if (_grid.HasNumber(pos))
        {
            _grid.ClearCellNumber(pos);
        }
        else
        {
            _grid.SetCellNumber(pos, _activeNum);
        }
    }

    private void OnSolutionFound(List<Pos> solution)
    {
        if (solution.Count == 0)
        {
            // No solution found, do nothing
            return;
        }

        // Only assign solution to the grid so it recognizes that a solution is found
        _grid.Solution = solution;
        // Parse the actual solution for displaying
        _grid.ParseSolution(solution);
    }

    private static bool CellHasRightWall(Pos pos)
    {
        return pos.Col == 2;
    }

    private static bool CellHasBottomWall(Pos pos)
    {
        return pos.Row is 1 or 3;
    }

}
