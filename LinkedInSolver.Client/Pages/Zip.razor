@page "/zip"
@using LinkedInSolver.Client.Components
@using LinkedInSolver.Client.Models

<PuzzleGrid CurrentPuzzle="Puzzle" CurrentGrid="_grid" PageGetCellClasses="GetCellClasses"
            PageGetCellContent="GetCellContent" PageOnCellClick="OnCellClick" PageOnBorderClick="OnBorderClick"/>

@code {
  private static readonly Puzzle Puzzle = Puzzle.GetPuzzle("Zip");

  private readonly ZipGrid _grid = new(Grid.DefaultSize);

  private List<string> GetCellClasses(Pos pos)
  {
    var classes = new List<string>();

    if (_grid.GetHasRightWall(pos))
    {
      classes.Add("right-wall");
    }

    if (_grid.GetHasBottomWall(pos))
    {
      classes.Add("bottom-wall");
    }

    if (pos.Col > 0 && _grid.GetHasRightWall(pos.GetNeighbor(Pos.Direction.Left)))
    {
      classes.Add("left-wall");
    }

    if (pos.Row > 0 && _grid.GetHasBottomWall(pos.GetNeighbor(Pos.Direction.Up)))
    {
      classes.Add("top-wall");
    }

    return classes;
  }

  private RenderFragment? GetCellContent(Pos pos)
  {
    if (!_grid.HasNumber(pos))
    {
      return null;
    }

    var cellNumber = _grid.GetCellNumber(pos);
    var maxNumber = _grid.GetMaxNumber();
    var isFirstOrLast = cellNumber == 1 || cellNumber == maxNumber;
    return @<span class="cell-number @(isFirstOrLast ? "first-last" : "")">@cellNumber</span>;
  }

  private void OnCellClick(Pos pos)
  {
    _grid.OnCellClick(pos);
  }

  private void OnBorderClick(Pos pos1, Pos pos2)
  {
    _grid.OnBorderClick(pos1, pos2);
  }

}
