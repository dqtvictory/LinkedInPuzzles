<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/LinkedInSolver.Client/Components/PuzzleGrid.razor">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/LinkedInSolver.Client/Components/PuzzleGrid.razor" />
              <option name="originalContent" value="@using LinkedInSolver.Client.Models&#10;&lt;style&gt;&#10;    .grid-container {&#10;        display: flex;&#10;        justify-content: center;&#10;        margin-top: 24px;&#10;    }&#10;&#10;    .puzzle-grid-wrapper {&#10;        position: relative;&#10;        width: fit-content;&#10;    }&#10;&#10;    .puzzle-grid {&#10;        display: grid;&#10;        gap: 1px;&#10;        background-color: #dee2e6;&#10;        border: 2px solid #dee2e6;&#10;        border-radius: 8px;&#10;        padding: 8px;&#10;        width: fit-content;&#10;        aspect-ratio: 1;&#10;    }&#10;&#10;    .grid-cell {&#10;        border: 1px solid #e9ecef;&#10;        cursor: pointer;&#10;        transition: all 0.2s ease;&#10;        border-radius: 2px;&#10;        min-height: 60px;&#10;        min-width: 60px;&#10;        width: 60px;&#10;        height: 60px;&#10;        display: flex;&#10;        align-items: center;&#10;        justify-content: center;&#10;        position: relative;&#10;    }&#10;&#10;    .grid-cell.disabled {&#10;        cursor: not-allowed !important;&#10;        opacity: 0.6;&#10;        pointer-events: none;&#10;    }&#10;&#10;    .border-button {&#10;        position: absolute;&#10;        width: 24px;&#10;        height: 24px;&#10;        background-color: #90ee90;&#10;        border: 2px solid #90ee90;&#10;        border-radius: 50%;&#10;        display: flex;&#10;        align-items: center;&#10;        justify-content: center;&#10;        cursor: pointer;&#10;        opacity: 0;&#10;        transition: opacity 0.2s ease;&#10;        z-index: 10;&#10;    }&#10;&#10;    .border-button:hover {&#10;        opacity: 1 !important;&#10;        background-color: #7fdd7f;&#10;    }&#10;&#10;    .border-button.disabled {&#10;        cursor: not-allowed !important;&#10;        opacity: 0 !important;&#10;        pointer-events: none;&#10;    }&#10;&#10;    .plus-icon {&#10;        color: #a9a9a9;&#10;        font-size: 16px;&#10;        font-weight: bold;&#10;        line-height: 1;&#10;    }&#10;&#10;    .debug-message {&#10;        margin-top: 16px;&#10;        padding: 8px;&#10;        background-color: #f8f9fa;&#10;        border: 1px solid #dee2e6;&#10;        border-radius: 4px;&#10;        font-family: monospace;&#10;        text-align: center;&#10;    }&#10;&#10;    .grid-cell:hover {&#10;        background-color: #f8f9fa;&#10;        transform: scale(0.95);&#10;    }&#10;&#10;    .puzzle-content {&#10;        transition: opacity 0.3s ease;&#10;    }&#10;&#10;    .puzzle-content.disabled {&#10;        opacity: 0.6;&#10;        pointer-events: none;&#10;    }&#10;&lt;/style&gt;&#10;&#10;&lt;PageTitle&gt;@CurrentPuzzle.Name - LinkedIn Puzzles&lt;/PageTitle&gt;&#10;&#10;&lt;MudContainer MaxWidth=&quot;MaxWidth.Large&quot; Class=&quot;mt-4&quot;&gt;&#10;&#10;    &lt;MudBreadcrumbs Items=&quot;_breadcrumbItems&quot; Class=&quot;mb-4&quot;/&gt;&#10;&#10;    &lt;div class=&quot;puzzle-content @(_solverRunning ? &quot;disabled&quot; : &quot;&quot;)&quot;&gt;&#10;        &lt;div class=&quot;d-flex align-center mb-4&quot;&gt;&#10;            &lt;img src=&quot;@CurrentPuzzle.Icon&quot; alt=&quot;@CurrentPuzzle.Name&quot;&#10;                 style=&quot;width: 48px; height: 48px; margin-right: 16px;&quot;/&gt;&#10;            &lt;MudText Typo=&quot;Typo.h4&quot; GutterBottom=&quot;false&quot;&gt;&#10;                @CurrentPuzzle.Name&#10;            &lt;/MudText&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div class=&quot;d-flex justify-center mb-4&quot;&gt;&#10;            &lt;div class=&quot;d-flex align-center&quot;&gt;&#10;                &lt;MudButton Variant=&quot;Variant.Filled&quot; Color=&quot;Color.Success&quot; @onclick=&quot;ValidateAndSolve&quot;&#10;                           Disabled=&quot;@_solverRunning&quot; Style=&quot;margin: 8px&quot;&gt;&#10;                    @if (_solverRunning)&#10;                    {&#10;                        &lt;MudProgressCircular Color=&quot;Color.Secondary&quot; Size=&quot;Size.Small&quot; Indeterminate=&quot;true&quot;/&gt;&#10;                        &lt;span style=&quot;margin-left: 8px;&quot;&gt;Processing...&lt;/span&gt;&#10;                    }&#10;                    else&#10;                    {&#10;                        &lt;span&gt;Validate and Solve&lt;/span&gt;&#10;                    }&#10;                &lt;/MudButton&gt;&#10;                &lt;MudButton Variant=&quot;Variant.Filled&quot; Color=&quot;Color.Primary&quot; @onclick=&quot;OnResizeGrid&quot;&#10;                           Disabled=&quot;@_solverRunning&quot;&#10;                           Style=&quot;margin: 8px&quot;&gt;&#10;                    Reset Grid&#10;                &lt;/MudButton&gt;&#10;                &lt;MudTextField @bind-Value=&quot;_gridSizeInput&quot; Label=&quot;Grid Size&quot; Variant=&quot;Variant.Outlined&quot;&#10;                              Margin=&quot;Margin.Dense&quot;&#10;                              Style=&quot;width: 120px; margin-left: 8px;&quot; Error=&quot;@_showError&quot; ErrorText=&quot;@_errorMessage&quot;&#10;                              T=&quot;int&quot;&#10;                              Disabled=&quot;@_solverRunning&quot;/&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div class=&quot;grid-container&quot;&gt;&#10;            &lt;div class=&quot;puzzle-grid-wrapper&quot;&gt;&#10;                &lt;div class=&quot;puzzle-grid&quot;&#10;                     style=&quot;grid-template-columns: repeat(@CurrentGrid.Size, 1fr); grid-template-rows: repeat(@CurrentGrid.Size, 1fr);&quot;&gt;&#10;                    @for (var row = 0; row &lt; CurrentGrid.Size; row++)&#10;                    for (var col = 0; col &lt; CurrentGrid.Size; col++)&#10;                    {&#10;                        var pos = new Pos(row, col);&#10;&#10;                        &lt;!-- cell contents --&gt;&#10;                        &lt;div class=&quot;@GetCellClasses(pos)&quot; style=&quot;background-color: @GetCellBgColor(pos)&quot;&#10;                             @onclick=&quot;() =&gt; OnCellClick(pos)&quot;&gt;&#10;                            @PageGetCellContent?.Invoke(pos)&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;!-- cell borders --&gt;&#10;                        @if (PageOnBorderClick == null)&#10;                        {&#10;                            continue;&#10;                        }&#10;&#10;                        // Horizontal border button (below current cell)&#10;                        if (row &lt; CurrentGrid.Size - 1)&#10;                        {&#10;                            var downPos = pos.GetNeighbor(Pos.Direction.Down);&#10;                            var borderContent = PageGetBorderContent?.Invoke(pos, downPos);&#10;                            var customBorderClasses = PageGetBorderClasses?.Invoke(pos, downPos) ?? [];&#10;                            var hTop = GetHorizontalBorderTop(pos);&#10;                            var hLeft = GetHorizontalBorderLeft(pos);&#10;&#10;                            var borderClasses = GetBorderClasses(pos, downPos, customBorderClasses);&#10;                            var finalClass = $&quot;{borderClasses} horizontal&quot;;&#10;&#10;                            &lt;div class=&quot;@finalClass&quot; style=&quot;top: @(hTop)px; left: @(hLeft)px;&quot;&#10;                                 @onclick=&quot;() =&gt; OnBorderClick(pos, downPos)&quot;&gt;&#10;                                @if (borderContent != null)&#10;                                {&#10;                                    &lt;span&gt;@borderContent&lt;/span&gt;&#10;                                }&#10;                                else&#10;                                {&#10;                                    &lt;span class=&quot;plus-icon&quot;&gt;+&lt;/span&gt;&#10;                                }&#10;                            &lt;/div&gt;&#10;                        }&#10;&#10;                        // Vertical border button (right of current cell)&#10;                        if (col &lt; CurrentGrid.Size - 1)&#10;                        {&#10;                            var rightPos = pos.GetNeighbor(Pos.Direction.Right);&#10;                            var borderContent = PageGetBorderContent?.Invoke(pos, rightPos);&#10;                            var customBorderClasses = PageGetBorderClasses?.Invoke(pos, rightPos) ?? [];&#10;                            var vTop = GetVerticalBorderTop(pos);&#10;                            var vLeft = GetVerticalBorderLeft(pos);&#10;&#10;                            var borderClasses = GetBorderClasses(pos, rightPos, customBorderClasses);&#10;                            var finalClass = $&quot;{borderClasses} vertical&quot;;&#10;&#10;                            &lt;div class=&quot;@finalClass&quot; style=&quot;top: @(vTop)px; left: @(vLeft)px;&quot;&#10;                                 @onclick=&quot;() =&gt; OnBorderClick(pos, rightPos)&quot;&gt;&#10;                                @if (borderContent != null)&#10;                                {&#10;                                    &lt;span&gt;@borderContent&lt;/span&gt;&#10;                                }&#10;                                else&#10;                                {&#10;                                    &lt;span class=&quot;plus-icon&quot;&gt;+&lt;/span&gt;&#10;                                }&#10;                            &lt;/div&gt;&#10;                        }&#10;                    }&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div class=&quot;debug-message&quot;&gt;&#10;            @_debugMessage&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;&lt;/MudContainer&gt;&#10;&#10;@code {&#10;&#10;    // Dynamic positioning constants (taken from CSS)&#10;    const int CellSize = 60, CellGap = 1, CellSizeWithGap = CellSize + CellGap;&#10;    const int GridPadding = 8;&#10;    const int BorderButtonSize = 24;&#10;    const int Correction = 2;&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Current puzzle&#10;    /// &lt;/summary&gt;&#10;    [Parameter]&#10;    public Puzzle CurrentPuzzle { get; set; } = null!;&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Grid of the current puzzle&#10;    /// &lt;/summary&gt;&#10;    [Parameter]&#10;    public Grid CurrentGrid { get; set; } = null!;&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Get background color for each cell&#10;    /// &lt;/summary&gt;&#10;    [Parameter]&#10;    public Func&lt;Pos, string&gt;? PageGetCellBgColor { get; set; }&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Get CSS classes for each cell's div element&#10;    /// &lt;/summary&gt;&#10;    [Parameter]&#10;    public Func&lt;Pos, List&lt;string&gt;&gt;? PageGetCellClasses { get; set; }&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Get content for each cell&#10;    /// &lt;/summary&gt;&#10;    [Parameter]&#10;    public Func&lt;Pos, RenderFragment&gt;? PageGetCellContent { get; set; }&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Action to be invoked when a border between two cells is clicked&#10;    /// &lt;/summary&gt;&#10;    [Parameter]&#10;    public Action&lt;Pos, Pos&gt;? PageOnBorderClick { get; set; }&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Action to be invoked when a cell is clicked&#10;    /// &lt;/summary&gt;&#10;    [Parameter]&#10;    public Action&lt;Pos&gt; PageOnCellClick { get; set; } = null!;&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Get border content for display (e.g., &quot;=&quot;, &quot;×&quot;, or null for hover)&#10;    /// &lt;/summary&gt;&#10;    [Parameter]&#10;    public Func&lt;Pos, Pos, string?&gt;? PageGetBorderContent { get; set; }&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Get border CSS classes&#10;    /// &lt;/summary&gt;&#10;    [Parameter]&#10;    public Func&lt;Pos, Pos, List&lt;string&gt;&gt;? PageGetBorderClasses { get; set; }&#10;&#10;    /// &lt;summary&gt;&#10;    ///     UI input for grid size for resizing the grid&#10;    /// &lt;/summary&gt;&#10;    private int _gridSizeInput = Grid.DefaultSize;&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Error message visibility for grid size input&#10;    /// &lt;/summary&gt;&#10;    private bool _showError;&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Error message content for grid size input, when _showError is true&#10;    /// &lt;/summary&gt;&#10;    private string _errorMessage = string.Empty;&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Debug message displayed at page's bottom&#10;    /// &lt;/summary&gt;&#10;    private string _debugMessage = string.Empty;&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Breadcrumb items for navigation&#10;    /// &lt;/summary&gt;&#10;    private List&lt;BreadcrumbItem&gt; _breadcrumbItems = null!;&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Whether the solver is running, which disables UI interactions&#10;    /// &lt;/summary&gt;&#10;    private bool _solverRunning;&#10;&#10;    protected override void OnInitialized()&#10;    {&#10;        _gridSizeInput = Grid.DefaultSize;&#10;        _breadcrumbItems =&#10;        [&#10;            new BreadcrumbItem(&quot;Home&quot;, &quot;/&quot;, icon: Icons.Material.Filled.Home),&#10;            new BreadcrumbItem(CurrentPuzzle.Name, null, true)&#10;        ];&#10;        Initialize();&#10;    }&#10;&#10;    private void OnResizeGrid()&#10;    {&#10;        if (_solverRunning)&#10;        {&#10;            return;&#10;        }&#10;&#10;        if (_gridSizeInput is &lt; Grid.MinSize or &gt; Grid.MaxSize)&#10;        {&#10;            _showError = true;&#10;            _errorMessage = $&quot;Grid Size should be between {Grid.MinSize} and {Grid.MaxSize}&quot;;&#10;            StateHasChanged();&#10;            return;&#10;        }&#10;&#10;        Initialize();&#10;        CurrentGrid.Reset(_gridSizeInput);&#10;        StateHasChanged();&#10;    }&#10;&#10;    private void Initialize()&#10;    {&#10;        _showError = false;&#10;        _errorMessage = string.Empty;&#10;        _debugMessage = string.Empty;&#10;    }&#10;&#10;    private void OnCellClick(Pos pos)&#10;    {&#10;        if (_solverRunning)&#10;        {&#10;            return;&#10;        }&#10;&#10;        PageOnCellClick(pos);&#10;        StateHasChanged();&#10;    }&#10;&#10;    private void OnBorderClick(Pos pos1, Pos pos2)&#10;    {&#10;        if (_solverRunning)&#10;        {&#10;            return;&#10;        }&#10;&#10;        PageOnBorderClick!.Invoke(pos1, pos2);&#10;        StateHasChanged();&#10;    }&#10;&#10;    private string GetCellBgColor(Pos pos)&#10;    {&#10;        return PageGetCellBgColor?.Invoke(pos) ?? &quot;#FFFFFF&quot;; // Default white background&#10;    }&#10;&#10;    private string GetCellClasses(Pos pos)&#10;    {&#10;        var classes = PageGetCellClasses?.Invoke(pos) ?? [];&#10;        classes.Add(&quot;grid-cell&quot;);&#10;        if (_solverRunning)&#10;        {&#10;            classes.Add(&quot;disabled&quot;);&#10;        }&#10;&#10;        return string.Join(&quot; &quot;, classes);&#10;    }&#10;&#10;    private string GetBorderClasses(Pos pos1, Pos pos2, List&lt;string&gt; customClasses)&#10;    {&#10;        var baseClass = _solverRunning ? &quot;border-button disabled&quot; : &quot;border-button&quot;;&#10;        return string.Join(&quot; &quot;, customClasses.Prepend(baseClass));&#10;    }&#10;&#10;    private static int GetHorizontalBorderTop(Pos pos)&#10;    {&#10;        return GridPadding + (pos.Row + 1) * CellSizeWithGap - BorderButtonSize / 2 + Correction;&#10;    }&#10;&#10;    private static int GetHorizontalBorderLeft(Pos pos)&#10;    {&#10;        return GridPadding + pos.Col * CellSizeWithGap + (CellSize - BorderButtonSize) / 2 + Correction;&#10;    }&#10;&#10;    private static int GetVerticalBorderTop(Pos pos)&#10;    {&#10;        return GridPadding + pos.Row * CellSizeWithGap + (CellSize - BorderButtonSize) / 2 + Correction;&#10;    }&#10;&#10;    private static int GetVerticalBorderLeft(Pos pos)&#10;    {&#10;        return GridPadding + (pos.Col + 1) * CellSizeWithGap - BorderButtonSize / 2 + Correction;&#10;    }&#10;&#10;    private async Task ValidateAndSolve()&#10;    {&#10;        if (_solverRunning)&#10;        {&#10;            return;&#10;        }&#10;&#10;        _debugMessage = &quot;Validating...&quot;;&#10;        _solverRunning = true;&#10;        StateHasChanged();&#10;        var validationError = await Task.Run(CurrentGrid.Validate);&#10;        if (validationError != null)&#10;        {&#10;            _debugMessage = $&quot;Validation failed: {validationError}&quot;;&#10;            _solverRunning = false;&#10;            StateHasChanged();&#10;            return;&#10;        }&#10;&#10;        _debugMessage = &quot;Validation successful, solving...&quot;;&#10;        StateHasChanged();&#10;&#10;        var solution = await Task.Run(CurrentGrid.Solve);&#10;        if (solution.Count == 0)&#10;        {&#10;            // No solution found&#10;            _debugMessage = &quot;No solution found.&quot;;&#10;        }&#10;        else&#10;        {&#10;            _debugMessage = &quot;Solution found&quot;;&#10;            // Placeholder: update the UI with the solution&#10;        }&#10;&#10;        _solverRunning = false;&#10;        StateHasChanged();&#10;    }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="@using LinkedInSolver.Client.Models&#10;&lt;style&gt;&#10;    .grid-container {&#10;        display: flex;&#10;        justify-content: center;&#10;        margin-top: 24px;&#10;    }&#10;&#10;    .puzzle-grid-wrapper {&#10;        position: relative;&#10;        width: fit-content;&#10;    }&#10;&#10;    .puzzle-grid {&#10;        display: grid;&#10;        gap: 1px;&#10;        background-color: #dee2e6;&#10;        border: 2px solid #dee2e6;&#10;        border-radius: 8px;&#10;        padding: 8px;&#10;        width: fit-content;&#10;        aspect-ratio: 1;&#10;    }&#10;&#10;    .grid-cell {&#10;        border: 1px solid #e9ecef;&#10;        cursor: pointer;&#10;        transition: all 0.2s ease;&#10;        border-radius: 2px;&#10;        min-height: 60px;&#10;        min-width: 60px;&#10;        width: 60px;&#10;        height: 60px;&#10;        display: flex;&#10;        align-items: center;&#10;        justify-content: center;&#10;        position: relative;&#10;    }&#10;&#10;    .grid-cell.disabled {&#10;        cursor: not-allowed !important;&#10;        opacity: 0.6;&#10;        pointer-events: none;&#10;    }&#10;&#10;    .border-button {&#10;        position: absolute;&#10;        width: 24px;&#10;        height: 24px;&#10;        background-color: #90ee90;&#10;        border: 2px solid #90ee90;&#10;        border-radius: 50%;&#10;        display: flex;&#10;        align-items: center;&#10;        justify-content: center;&#10;        cursor: pointer;&#10;        opacity: 0;&#10;        transition: opacity 0.2s ease;&#10;        z-index: 10;&#10;    }&#10;&#10;    .border-button:hover {&#10;        opacity: 1 !important;&#10;        background-color: #7fdd7f;&#10;    }&#10;&#10;    .border-button.disabled {&#10;        cursor: not-allowed !important;&#10;        opacity: 0 !important;&#10;        pointer-events: none;&#10;    }&#10;&#10;    .plus-icon {&#10;        color: #a9a9a9;&#10;        font-size: 16px;&#10;        font-weight: bold;&#10;        line-height: 1;&#10;    }&#10;&#10;    .debug-message {&#10;        margin-top: 16px;&#10;        padding: 8px;&#10;        background-color: #f8f9fa;&#10;        border: 1px solid #dee2e6;&#10;        border-radius: 4px;&#10;        font-family: monospace;&#10;        text-align: center;&#10;    }&#10;&#10;    .grid-cell:hover {&#10;        background-color: #f8f9fa;&#10;        transform: scale(0.95);&#10;    }&#10;&#10;    .puzzle-content {&#10;        transition: opacity 0.3s ease;&#10;    }&#10;&#10;    .puzzle-content.disabled {&#10;        opacity: 0.6;&#10;        pointer-events: none;&#10;    }&#10;&lt;/style&gt;&#10;&#10;&lt;PageTitle&gt;@CurrentPuzzle.Name - LinkedIn Puzzles&lt;/PageTitle&gt;&#10;&#10;&lt;MudContainer MaxWidth=&quot;MaxWidth.Large&quot; Class=&quot;mt-4&quot;&gt;&#10;&#10;    &lt;MudBreadcrumbs Items=&quot;_breadcrumbItems&quot; Class=&quot;mb-4&quot;/&gt;&#10;&#10;    &lt;div class=&quot;puzzle-content @(_solverRunning ? &quot;disabled&quot; : &quot;&quot;)&quot;&gt;&#10;        &lt;div class=&quot;d-flex align-center mb-4&quot;&gt;&#10;            &lt;img src=&quot;@CurrentPuzzle.Icon&quot; alt=&quot;@CurrentPuzzle.Name&quot;&#10;                 style=&quot;width: 48px; height: 48px; margin-right: 16px;&quot;/&gt;&#10;            &lt;MudText Typo=&quot;Typo.h4&quot; GutterBottom=&quot;false&quot;&gt;&#10;                @CurrentPuzzle.Name&#10;            &lt;/MudText&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div class=&quot;d-flex justify-center mb-4&quot;&gt;&#10;            &lt;div class=&quot;d-flex align-center&quot;&gt;&#10;                &lt;MudButton Variant=&quot;Variant.Filled&quot; Color=&quot;Color.Success&quot; @onclick=&quot;ValidateAndSolve&quot;&#10;                           Disabled=&quot;@_solverRunning&quot; Style=&quot;margin: 8px&quot;&gt;&#10;                    @if (_solverRunning)&#10;                    {&#10;                        &lt;MudProgressCircular Color=&quot;Color.Secondary&quot; Size=&quot;Size.Small&quot; Indeterminate=&quot;true&quot;/&gt;&#10;                        &lt;span style=&quot;margin-left: 8px;&quot;&gt;Processing...&lt;/span&gt;&#10;                    }&#10;                    else&#10;                    {&#10;                        &lt;span&gt;Validate and Solve&lt;/span&gt;&#10;                    }&#10;                &lt;/MudButton&gt;&#10;                &lt;MudButton Variant=&quot;Variant.Filled&quot; Color=&quot;Color.Primary&quot; @onclick=&quot;OnResizeGrid&quot;&#10;                           Disabled=&quot;@_solverRunning&quot;&#10;                           Style=&quot;margin: 8px&quot;&gt;&#10;                    Reset Grid&#10;                &lt;/MudButton&gt;&#10;                &lt;MudTextField @bind-Value=&quot;_gridSizeInput&quot; Label=&quot;Grid Size&quot; Variant=&quot;Variant.Outlined&quot;&#10;                              Margin=&quot;Margin.Dense&quot;&#10;                              Style=&quot;width: 120px; margin-left: 8px;&quot; Error=&quot;@_showError&quot; ErrorText=&quot;@_errorMessage&quot;&#10;                              T=&quot;int&quot;&#10;                              Disabled=&quot;@_solverRunning&quot;/&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div class=&quot;grid-container&quot;&gt;&#10;            &lt;div class=&quot;puzzle-grid-wrapper&quot;&gt;&#10;                &lt;div class=&quot;puzzle-grid&quot;&#10;                     style=&quot;grid-template-columns: repeat(@CurrentGrid.Size, 1fr); grid-template-rows: repeat(@CurrentGrid.Size, 1fr);&quot;&gt;&#10;                    @for (var row = 0; row &lt; CurrentGrid.Size; row++)&#10;                    for (var col = 0; col &lt; CurrentGrid.Size; col++)&#10;                    {&#10;                        var pos = new Pos(row, col);&#10;&#10;                        &lt;!-- cell contents --&gt;&#10;                        &lt;div class=&quot;@GetCellClasses(pos)&quot; style=&quot;background-color: @GetCellBgColor(pos)&quot;&#10;                             @onclick=&quot;() =&gt; OnCellClick(pos)&quot;&gt;&#10;                            @PageGetCellContent?.Invoke(pos)&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;!-- cell borders --&gt;&#10;                        @if (PageOnBorderClick == null)&#10;                        {&#10;                            continue;&#10;                        }&#10;&#10;                        // Horizontal border button (below current cell)&#10;                        if (row &lt; CurrentGrid.Size - 1)&#10;                        {&#10;                            var downPos = pos.GetNeighbor(Pos.Direction.Down);&#10;                            var borderContent = PageGetBorderContent?.Invoke(pos, downPos);&#10;                            var customBorderClasses = PageGetBorderClasses?.Invoke(pos, downPos) ?? [];&#10;                            var hTop = GetHorizontalBorderTop(pos);&#10;                            var hLeft = GetHorizontalBorderLeft(pos);&#10;&#10;                            var borderClasses = GetBorderClasses(pos, downPos, customBorderClasses);&#10;                            var finalClass = $&quot;{borderClasses} horizontal&quot;;&#10;&#10;                            &lt;div class=&quot;@finalClass&quot; style=&quot;top: @(hTop)px; left: @(hLeft)px;&quot;&#10;                                 @onclick=&quot;() =&gt; OnBorderClick(pos, downPos)&quot;&gt;&#10;                                @if (borderContent != null)&#10;                                {&#10;                                    &lt;span&gt;@borderContent&lt;/span&gt;&#10;                                }&#10;                                else&#10;                                {&#10;                                    &lt;span class=&quot;plus-icon&quot;&gt;+&lt;/span&gt;&#10;                                }&#10;                            &lt;/div&gt;&#10;                        }&#10;&#10;                        // Vertical border button (right of current cell)&#10;                        if (col &lt; CurrentGrid.Size - 1)&#10;                        {&#10;                            var rightPos = pos.GetNeighbor(Pos.Direction.Right);&#10;                            var borderContent = PageGetBorderContent?.Invoke(pos, rightPos);&#10;                            var customBorderClasses = PageGetBorderClasses?.Invoke(pos, rightPos) ?? [];&#10;                            var vTop = GetVerticalBorderTop(pos);&#10;                            var vLeft = GetVerticalBorderLeft(pos);&#10;&#10;                            var borderClasses = GetBorderClasses(pos, rightPos, customBorderClasses);&#10;                            var finalClass = $&quot;{borderClasses} vertical&quot;;&#10;&#10;                            &lt;div class=&quot;@finalClass&quot; style=&quot;top: @(vTop)px; left: @(vLeft)px;&quot;&#10;                                 @onclick=&quot;() =&gt; OnBorderClick(pos, rightPos)&quot;&gt;&#10;                                @if (borderContent != null)&#10;                                {&#10;                                    &lt;span&gt;@borderContent&lt;/span&gt;&#10;                                }&#10;                                else&#10;                                {&#10;                                    &lt;span class=&quot;plus-icon&quot;&gt;+&lt;/span&gt;&#10;                                }&#10;                            &lt;/div&gt;&#10;                        }&#10;                    }&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div class=&quot;debug-message&quot;&gt;&#10;            @_debugMessage&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;&lt;/MudContainer&gt;&#10;&#10;@code {&#10;&#10;    // Dynamic positioning constants (taken from CSS)&#10;    const int CellSize = 60, CellGap = 1, CellSizeWithGap = CellSize + CellGap;&#10;    const int GridPadding = 8;&#10;    const int BorderButtonSize = 24;&#10;    const int Correction = 2;&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Current puzzle&#10;    /// &lt;/summary&gt;&#10;    [Parameter]&#10;    public Puzzle CurrentPuzzle { get; set; } = null!;&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Grid of the current puzzle&#10;    /// &lt;/summary&gt;&#10;    [Parameter]&#10;    public Grid CurrentGrid { get; set; } = null!;&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Get background color for each cell&#10;    /// &lt;/summary&gt;&#10;    [Parameter]&#10;    public Func&lt;Pos, string&gt;? PageGetCellBgColor { get; set; }&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Get CSS classes for each cell's div element&#10;    /// &lt;/summary&gt;&#10;    [Parameter]&#10;    public Func&lt;Pos, List&lt;string&gt;&gt;? PageGetCellClasses { get; set; }&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Get content for each cell&#10;    /// &lt;/summary&gt;&#10;    [Parameter]&#10;    public Func&lt;Pos, RenderFragment&gt;? PageGetCellContent { get; set; }&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Action to be invoked when a border between two cells is clicked&#10;    /// &lt;/summary&gt;&#10;    [Parameter]&#10;    public Action&lt;Pos, Pos&gt;? PageOnBorderClick { get; set; }&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Action to be invoked when a cell is clicked&#10;    /// &lt;/summary&gt;&#10;    [Parameter]&#10;    public Action&lt;Pos&gt; PageOnCellClick { get; set; } = null!;&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Get border content for display (e.g., &quot;=&quot;, &quot;×&quot;, or null for hover)&#10;    /// &lt;/summary&gt;&#10;    [Parameter]&#10;    public Func&lt;Pos, Pos, string?&gt;? PageGetBorderContent { get; set; }&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Get border CSS classes&#10;    /// &lt;/summary&gt;&#10;    [Parameter]&#10;    public Func&lt;Pos, Pos, List&lt;string&gt;&gt;? PageGetBorderClasses { get; set; }&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Action to be invoked when a solution is found to handle puzzle-specific display&#10;    /// &lt;/summary&gt;&#10;    [Parameter]&#10;    public Action&lt;List&lt;Pos&gt;&gt;? PageOnSolutionFound { get; set; }&#10;&#10;    /// &lt;summary&gt;&#10;    ///     UI input for grid size for resizing the grid&#10;    /// &lt;/summary&gt;&#10;    private int _gridSizeInput = Grid.DefaultSize;&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Error message visibility for grid size input&#10;    /// &lt;/summary&gt;&#10;    private bool _showError;&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Error message content for grid size input, when _showError is true&#10;    /// &lt;/summary&gt;&#10;    private string _errorMessage = string.Empty;&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Debug message displayed at page's bottom&#10;    /// &lt;/summary&gt;&#10;    private string _debugMessage = string.Empty;&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Breadcrumb items for navigation&#10;    /// &lt;/summary&gt;&#10;    private List&lt;BreadcrumbItem&gt; _breadcrumbItems = null!;&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Whether the solver is running, which disables UI interactions&#10;    /// &lt;/summary&gt;&#10;    private bool _solverRunning;&#10;&#10;    protected override void OnInitialized()&#10;    {&#10;        _gridSizeInput = Grid.DefaultSize;&#10;        _breadcrumbItems =&#10;        [&#10;            new BreadcrumbItem(&quot;Home&quot;, &quot;/&quot;, icon: Icons.Material.Filled.Home),&#10;            new BreadcrumbItem(CurrentPuzzle.Name, null, true)&#10;        ];&#10;        Initialize();&#10;    }&#10;&#10;    private void OnResizeGrid()&#10;    {&#10;        if (_solverRunning)&#10;        {&#10;            return;&#10;        }&#10;&#10;        if (_gridSizeInput is &lt; Grid.MinSize or &gt; Grid.MaxSize)&#10;        {&#10;            _showError = true;&#10;            _errorMessage = $&quot;Grid Size should be between {Grid.MinSize} and {Grid.MaxSize}&quot;;&#10;            StateHasChanged();&#10;            return;&#10;        }&#10;&#10;        Initialize();&#10;        CurrentGrid.Reset(_gridSizeInput);&#10;        StateHasChanged();&#10;    }&#10;&#10;    private void Initialize()&#10;    {&#10;        _showError = false;&#10;        _errorMessage = string.Empty;&#10;        _debugMessage = string.Empty;&#10;    }&#10;&#10;    private void OnCellClick(Pos pos)&#10;    {&#10;        if (_solverRunning)&#10;        {&#10;            return;&#10;        }&#10;&#10;        PageOnCellClick(pos);&#10;        StateHasChanged();&#10;    }&#10;&#10;    private void OnBorderClick(Pos pos1, Pos pos2)&#10;    {&#10;        if (_solverRunning)&#10;        {&#10;            return;&#10;        }&#10;&#10;        PageOnBorderClick!.Invoke(pos1, pos2);&#10;        StateHasChanged();&#10;    }&#10;&#10;    private string GetCellBgColor(Pos pos)&#10;    {&#10;        return PageGetCellBgColor?.Invoke(pos) ?? &quot;#FFFFFF&quot;; // Default white background&#10;    }&#10;&#10;    private string GetCellClasses(Pos pos)&#10;    {&#10;        var classes = PageGetCellClasses?.Invoke(pos) ?? [];&#10;        classes.Add(&quot;grid-cell&quot;);&#10;        if (_solverRunning)&#10;        {&#10;            classes.Add(&quot;disabled&quot;);&#10;        }&#10;&#10;        return string.Join(&quot; &quot;, classes);&#10;    }&#10;&#10;    private string GetBorderClasses(Pos pos1, Pos pos2, List&lt;string&gt; customClasses)&#10;    {&#10;        var baseClass = _solverRunning ? &quot;border-button disabled&quot; : &quot;border-button&quot;;&#10;        return string.Join(&quot; &quot;, customClasses.Prepend(baseClass));&#10;    }&#10;&#10;    private static int GetHorizontalBorderTop(Pos pos)&#10;    {&#10;        return GridPadding + (pos.Row + 1) * CellSizeWithGap - BorderButtonSize / 2 + Correction;&#10;    }&#10;&#10;    private static int GetHorizontalBorderLeft(Pos pos)&#10;    {&#10;        return GridPadding + pos.Col * CellSizeWithGap + (CellSize - BorderButtonSize) / 2 + Correction;&#10;    }&#10;&#10;    private static int GetVerticalBorderTop(Pos pos)&#10;    {&#10;        return GridPadding + pos.Row * CellSizeWithGap + (CellSize - BorderButtonSize) / 2 + Correction;&#10;    }&#10;&#10;    private static int GetVerticalBorderLeft(Pos pos)&#10;    {&#10;        return GridPadding + (pos.Col + 1) * CellSizeWithGap - BorderButtonSize / 2 + Correction;&#10;    }&#10;&#10;    private async Task ValidateAndSolve()&#10;    {&#10;        if (_solverRunning)&#10;        {&#10;            return;&#10;        }&#10;&#10;        _debugMessage = &quot;Validating...&quot;;&#10;        _solverRunning = true;&#10;        StateHasChanged();&#10;        var validationError = await Task.Run(CurrentGrid.Validate);&#10;        if (validationError != null)&#10;        {&#10;            _debugMessage = $&quot;Validation failed: {validationError}&quot;;&#10;            _solverRunning = false;&#10;            StateHasChanged();&#10;            return;&#10;        }&#10;&#10;        _debugMessage = &quot;Validation successful, solving...&quot;;&#10;        StateHasChanged();&#10;&#10;        var solution = await Task.Run(CurrentGrid.Solve);&#10;        if (solution.Count == 0)&#10;        {&#10;            // No solution found&#10;            _debugMessage = &quot;No solution found.&quot;;&#10;        }&#10;        else&#10;        {&#10;            _debugMessage = &quot;Solution found&quot;;&#10;            // Call puzzle-specific solution display handler&#10;            PageOnSolutionFound?.Invoke(solution);&#10;        }&#10;&#10;        _solverRunning = false;&#10;        StateHasChanged();&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/LinkedInSolver.Client/Pages/Queens.razor">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/LinkedInSolver.Client/Pages/Queens.razor" />
              <option name="originalContent" value="@page &quot;/queens&quot;&#10;@using LinkedInSolver.Client.Components&#10;@using LinkedInSolver.Client.Models&#10;&#10;&lt;style&gt;&#10;    .region-selector {&#10;        display: flex;&#10;        justify-content: center;&#10;        margin: 20px 0;&#10;        gap: 8px;&#10;        flex-wrap: wrap;&#10;    }&#10;&#10;    .region-button {&#10;        width: 50px;&#10;        height: 50px;&#10;        border: 2px solid #333;&#10;        border-radius: 8px;&#10;        font-size: 18px;&#10;        font-weight: bold;&#10;        cursor: pointer;&#10;        transition: all 0.2s ease;&#10;        display: flex;&#10;        align-items: center;&#10;        justify-content: center;&#10;    }&#10;&#10;    .region-button:hover {&#10;        transform: scale(1.1);&#10;        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);&#10;    }&#10;&#10;    .region-button.selected {&#10;        border-width: 4px;&#10;        transform: scale(1.15);&#10;        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);&#10;    }&#10;&#10;    .active-region-display {&#10;        text-align: center;&#10;        margin: 10px 0;&#10;        font-size: 18px;&#10;        font-weight: bold;&#10;        color: #333;&#10;    }&#10;&lt;/style&gt;&#10;&#10;&lt;PuzzleGrid CurrentPuzzle=&quot;Puzzle&quot; CurrentGrid=&quot;_grid&quot; PageOnCellClick=&quot;OnCellClick&quot;&#10;            PageGetCellBgColor=&quot;GetCellBgColor&quot;/&gt;&#10;&#10;&lt;div class=&quot;region-selector&quot;&gt;&#10;    @for (var i = 0; i &lt; RegionColors.Length; i++)&#10;    {&#10;        var region = i;&#10;        var isActive = _activeRegion == region;&#10;        var buttonStyle = $&quot;background-color: {RegionColors[region]}; color: black;&quot;;&#10;&#10;        &lt;button class=&quot;region-button @(isActive ? &quot;selected&quot; : &quot;&quot;)&quot;&#10;                style=&quot;@buttonStyle&quot;&#10;                @onclick=&quot;() =&gt; SetActiveRegion(region)&quot;&gt;&#10;            @region&#10;        &lt;/button&gt;&#10;    }&#10;&lt;/div&gt;&#10;&#10;&lt;div class=&quot;active-region-display&quot;&gt;&#10;    Active region: &lt;span style=&quot;color: @RegionColors[_activeRegion]; font-weight: bold;&quot;&gt;@_activeRegion&lt;/span&gt;&#10;&lt;/div&gt;&#10;&#10;@code {&#10;    private static readonly Puzzle Puzzle = Puzzle.GetPuzzle(&quot;Queens&quot;);&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Array of colors representing different regions. The array's length ultimately determines the number of&#10;    ///     regions available&#10;    /// &lt;/summary&gt;&#10;    private static readonly string[] RegionColors =&#10;    [&#10;        &quot;#FFFFFF&quot;, // 0 - White&#10;        &quot;#CCCCCC&quot;, // 1 - Light Grey&#10;        &quot;#45B7D1&quot;, // 2 - Blue&#10;        &quot;#F06767&quot;, // 3 - Red&#10;        &quot;#FECA57&quot;, // 4 - Yellow&#10;        &quot;#FF9FF3&quot;, // 5 - Pink&#10;        &quot;#AD6FF7&quot;, // 6 - Purple&#10;        &quot;#8BAD45&quot; // 7 - Green&#10;    ];&#10;&#10;    /// &lt;summary&gt;&#10;    ///     The grid for the Queens puzzle&#10;    /// &lt;/summary&gt;&#10;    private readonly QueensGrid _grid = new(Grid.DefaultSize);&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Currently active region index in the UI&#10;    /// &lt;/summary&gt;&#10;    private int _activeRegion;&#10;&#10;    private void SetActiveRegion(int region)&#10;    {&#10;        _activeRegion = region;&#10;        StateHasChanged();&#10;    }&#10;&#10;    private void OnCellClick(Pos pos)&#10;    {&#10;        _grid.SetRegionForCell(pos, _activeRegion);&#10;    }&#10;&#10;    private string GetCellBgColor(Pos pos)&#10;    {&#10;        var region = _grid.GetRegionForCell(pos);&#10;        return RegionColors[region];&#10;    }&#10;&#10;}&#10;&#10;" />
              <option name="updatedContent" value="@page &quot;/queens&quot;&#10;@using LinkedInSolver.Client.Components&#10;@using LinkedInSolver.Client.Models&#10;&#10;&lt;style&gt;&#10;    .region-selector {&#10;        display: flex;&#10;        justify-content: center;&#10;        margin: 20px 0;&#10;        gap: 8px;&#10;        flex-wrap: wrap;&#10;    }&#10;&#10;    .region-button {&#10;        width: 50px;&#10;        height: 50px;&#10;        border: 2px solid #333;&#10;        border-radius: 8px;&#10;        font-size: 18px;&#10;        font-weight: bold;&#10;        cursor: pointer;&#10;        transition: all 0.2s ease;&#10;        display: flex;&#10;        align-items: center;&#10;        justify-content: center;&#10;    }&#10;&#10;    .region-button:hover {&#10;        transform: scale(1.1);&#10;        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);&#10;    }&#10;&#10;    .region-button.selected {&#10;        border-width: 4px;&#10;        transform: scale(1.15);&#10;        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);&#10;    }&#10;&#10;    .active-region-display {&#10;        text-align: center;&#10;        margin: 10px 0;&#10;        font-size: 18px;&#10;        font-weight: bold;&#10;        color: #333;&#10;    }&#10;&#10;    .queen-symbol {&#10;        font-size: 32px;&#10;        color: #FFD700;&#10;        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);&#10;    }&#10;&lt;/style&gt;&#10;&#10;&lt;PuzzleGrid CurrentPuzzle=&quot;Puzzle&quot; CurrentGrid=&quot;_grid&quot; PageOnCellClick=&quot;OnCellClick&quot;&#10;            PageGetCellBgColor=&quot;GetCellBgColor&quot; PageGetCellContent=&quot;GetCellContent&quot;&#10;            PageOnSolutionFound=&quot;OnSolutionFound&quot;/&gt;&#10;&#10;&lt;div class=&quot;region-selector&quot;&gt;&#10;    @for (var i = 0; i &lt; RegionColors.Length; i++)&#10;    {&#10;        var region = i; // Capture for closure&#10;        &lt;button class=&quot;region-button @(region == _activeRegion ? &quot;selected&quot; : &quot;&quot;)&quot;&#10;                style=&quot;background-color: @RegionColors[region]&quot;&#10;                @onclick=&quot;() =&gt; SetActiveRegion(region)&quot;&gt;&#10;            @region&#10;        &lt;/button&gt;&#10;    }&#10;&lt;/div&gt;&#10;&#10;&lt;div class=&quot;active-region-display&quot;&gt;&#10;    Active region: &lt;span style=&quot;color: @RegionColors[_activeRegion]; font-weight: bold;&quot;&gt;@_activeRegion&lt;/span&gt;&#10;&lt;/div&gt;&#10;&#10;@code {&#10;    private static readonly Puzzle Puzzle = Puzzle.GetPuzzle(&quot;Queens&quot;);&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Array of colors representing different regions. The array's length ultimately determines the number of&#10;    ///     regions available&#10;    /// &lt;/summary&gt;&#10;    private static readonly string[] RegionColors =&#10;    [&#10;        &quot;#FFFFFF&quot;, // 0 - White&#10;        &quot;#CCCCCC&quot;, // 1 - Light Grey&#10;        &quot;#45B7D1&quot;, // 2 - Blue&#10;        &quot;#F06767&quot;, // 3 - Red&#10;        &quot;#FECA57&quot;, // 4 - Yellow&#10;        &quot;#FF9FF3&quot;, // 5 - Pink&#10;        &quot;#AD6FF7&quot;, // 6 - Purple&#10;        &quot;#8BAD45&quot; // 7 - Green&#10;    ];&#10;&#10;    /// &lt;summary&gt;&#10;    ///     The grid for the Queens puzzle&#10;    /// &lt;/summary&gt;&#10;    private readonly QueensGrid _grid = new(Grid.DefaultSize);&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Currently active region index in the UI&#10;    /// &lt;/summary&gt;&#10;    private int _activeRegion;&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Solution positions where queens should be placed&#10;    /// &lt;/summary&gt;&#10;    private HashSet&lt;Pos&gt; _solutionPositions = new();&#10;&#10;    private void SetActiveRegion(int region)&#10;    {&#10;        _activeRegion = region;&#10;        StateHasChanged();&#10;    }&#10;&#10;    private void OnCellClick(Pos pos)&#10;    {&#10;        _grid.SetRegionForCell(pos, _activeRegion);&#10;    }&#10;&#10;    private string GetCellBgColor(Pos pos)&#10;    {&#10;        var region = _grid.GetRegionForCell(pos);&#10;        return RegionColors[region];&#10;    }&#10;&#10;    private RenderFragment GetCellContent(Pos pos)&#10;    {&#10;        return builder =&gt;&#10;        {&#10;            // Display golden queen symbol if this position is in the solution&#10;            if (_solutionPositions.Contains(pos))&#10;            {&#10;                builder.OpenElement(0, &quot;span&quot;);&#10;                builder.AddAttribute(1, &quot;class&quot;, &quot;queen-symbol&quot;);&#10;                builder.AddContent(2, &quot;♛&quot;);&#10;                builder.CloseElement();&#10;            }&#10;        };&#10;    }&#10;&#10;    private void OnSolutionFound(List&lt;Pos&gt; solution)&#10;    {&#10;        // Store the solution positions to display queens&#10;        _solutionPositions = solution.ToHashSet();&#10;        StateHasChanged();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/LinkedInSolver.Client/wwwroot/keyboard-handler.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/LinkedInSolver.Client/wwwroot/keyboard-handler.js" />
              <option name="updatedContent" value="window.addKeydownListener = (dotNetHelper) =&gt; {&#10;    const handleKeydown = (event) =&gt; {&#10;        // Only handle number keys (0-9) and ignore if any modifier keys are pressed&#10;        if (event.key &gt;= '0' &amp;&amp; event.key &lt;= '9' &amp;&amp; !event.ctrlKey &amp;&amp; !event.altKey &amp;&amp; !event.metaKey) {&#10;            // Prevent default behavior for number keys&#10;            event.preventDefault();&#10;            &#10;            // Call the C# method&#10;            dotNetHelper.invokeMethodAsync('HandleKeyPress', event.key);&#10;        }&#10;    };&#10;&#10;    // Add event listener to document&#10;    document.addEventListener('keydown', handleKeydown);&#10;    &#10;    // Store the handler so it can be removed later if needed&#10;    window.currentKeydownHandler = handleKeydown;&#10;};&#10;&#10;window.removeKeydownListener = () =&gt; {&#10;    if (window.currentKeydownHandler) {&#10;        document.removeEventListener('keydown', window.currentKeydownHandler);&#10;        window.currentKeydownHandler = null;&#10;    }&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>