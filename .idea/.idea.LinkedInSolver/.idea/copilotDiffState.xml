<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/LinkedInSolver.Client/Components/PuzzleGrid.razor">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/LinkedInSolver.Client/Components/PuzzleGrid.razor" />
              <option name="originalContent" value="@using LinkedInSolver.Client.Models&#10;&lt;style&gt;&#10;  .grid-container {&#10;    display: flex;&#10;    justify-content: center;&#10;    margin-top: 24px;&#10;  }&#10;&#10;  .puzzle-grid-wrapper {&#10;    position: relative;&#10;    width: fit-content;&#10;  }&#10;&#10;  .puzzle-grid {&#10;    display: grid;&#10;    gap: 1px;&#10;    background-color: #dee2e6;&#10;    border: 2px solid #dee2e6;&#10;    border-radius: 8px;&#10;    padding: 8px;&#10;    width: fit-content;&#10;    aspect-ratio: 1;&#10;  }&#10;&#10;  .grid-cell {&#10;    border: 1px solid #e9ecef;&#10;    cursor: pointer;&#10;    transition: all 0.2s ease;&#10;    border-radius: 2px;&#10;    min-height: 60px;&#10;    min-width: 60px;&#10;    width: 60px;&#10;    height: 60px;&#10;    display: flex;&#10;    align-items: center;&#10;    justify-content: center;&#10;    position: relative;&#10;  }&#10;&#10;  .grid-cell.right-wall {&#10;    border-right: 2px solid #000 !important;&#10;  }&#10;&#10;  .grid-cell.bottom-wall {&#10;    border-bottom: 2px solid #000 !important;&#10;  }&#10;&#10;  .grid-cell.left-wall {&#10;    border-left: 2px solid #000 !important;&#10;  }&#10;&#10;  .grid-cell.top-wall {&#10;    border-top: 2px solid #000 !important;&#10;  }&#10;&#10;  .grid-cell.disabled {&#10;    cursor: not-allowed !important;&#10;    opacity: 0.6;&#10;    pointer-events: none;&#10;  }&#10;&#10;  .cell-number {&#10;    font-size: 20px;&#10;    font-weight: bold;&#10;    color: #333;&#10;    user-select: none;&#10;  }&#10;&#10;  .cell-number.first-last {&#10;    color: #dc3545 !important;&#10;  }&#10;&#10;  .border-button {&#10;    position: absolute;&#10;    width: 24px;&#10;    height: 24px;&#10;    background-color: #90EE90;&#10;    border: 2px solid #90EE90;&#10;    border-radius: 50%;&#10;    display: flex;&#10;    align-items: center;&#10;    justify-content: center;&#10;    cursor: pointer;&#10;    opacity: 0;&#10;    transition: opacity 0.2s ease;&#10;    z-index: 10;&#10;  }&#10;&#10;  .border-button:hover {&#10;    opacity: 1 !important;&#10;    background-color: #7FDD7F;&#10;  }&#10;&#10;  .border-button.disabled {&#10;    cursor: not-allowed !important;&#10;    opacity: 0 !important;&#10;    pointer-events: none;&#10;  }&#10;&#10;  .plus-icon {&#10;    color: #A9A9A9;&#10;    font-size: 16px;&#10;    font-weight: bold;&#10;    line-height: 1;&#10;  }&#10;&#10;  .debug-message {&#10;    margin-top: 16px;&#10;    padding: 8px;&#10;    background-color: #f8f9fa;&#10;    border: 1px solid #dee2e6;&#10;    border-radius: 4px;&#10;    font-family: monospace;&#10;    text-align: center;&#10;  }&#10;&#10;  .grid-cell:hover {&#10;    background-color: #f8f9fa;&#10;    transform: scale(0.95);&#10;  }&#10;&#10;  .grid-cell.active {&#10;    background-color: #dc3545;&#10;    border-color: #b02a37;&#10;  }&#10;&#10;  .grid-cell.active:hover {&#10;    background-color: #c82333;&#10;  }&#10;&#10;  .puzzle-content {&#10;    transition: opacity 0.3s ease;&#10;  }&#10;&#10;  .puzzle-content.disabled {&#10;    opacity: 0.6;&#10;    pointer-events: none;&#10;  }&#10;&lt;/style&gt;&#10;&#10;&lt;PageTitle&gt;@CurrentPuzzle.Name - LinkedIn Puzzles&lt;/PageTitle&gt;&#10;&#10;&lt;MudContainer MaxWidth=&quot;MaxWidth.Large&quot; Class=&quot;mt-4&quot;&gt;&#10;&#10;  &lt;MudBreadcrumbs Items=&quot;_breadcrumbItems&quot; Class=&quot;mb-4&quot;/&gt;&#10;&#10;  &lt;div class=&quot;puzzle-content @(_solverRunning ? &quot;disabled&quot; : &quot;&quot;)&quot;&gt;&#10;    &lt;div class=&quot;d-flex align-center mb-4&quot;&gt;&#10;      &lt;img src=&quot;@CurrentPuzzle.Icon&quot; alt=&quot;@CurrentPuzzle.Name&quot;&#10;           style=&quot;width: 48px; height: 48px; margin-right: 16px;&quot;/&gt;&#10;      &lt;MudText Typo=&quot;Typo.h4&quot; GutterBottom=&quot;false&quot;&gt;&#10;        @CurrentPuzzle.Name&#10;      &lt;/MudText&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;d-flex justify-center mb-4&quot;&gt;&#10;      &lt;div class=&quot;d-flex align-center&quot;&gt;&#10;        &lt;MudButton Variant=&quot;Variant.Filled&quot; Color=&quot;Color.Success&quot; @onclick=&quot;ValidateAndSolve&quot;&#10;                   Disabled=&quot;@_solverRunning&quot; Style=&quot;margin: 8px&quot;&gt;&#10;          @if (_solverRunning)&#10;          {&#10;            &lt;MudProgressCircular Color=&quot;Color.Secondary&quot; Size=&quot;Size.Small&quot; Indeterminate=&quot;true&quot;/&gt;&#10;            &lt;span style=&quot;margin-left: 8px;&quot;&gt;Processing...&lt;/span&gt;&#10;          }&#10;          else&#10;          {&#10;            &lt;span&gt;Validate and Solve&lt;/span&gt;&#10;          }&#10;        &lt;/MudButton&gt;&#10;        &lt;MudButton Variant=&quot;Variant.Filled&quot; Color=&quot;Color.Primary&quot; @onclick=&quot;OnResizeGrid&quot; Disabled=&quot;@_solverRunning&quot;&#10;                   Style=&quot;margin: 8px&quot;&gt;&#10;          Reset Grid&#10;        &lt;/MudButton&gt;&#10;        &lt;MudTextField @bind-Value=&quot;_gridSizeInput&quot; Label=&quot;Grid Size&quot; Variant=&quot;Variant.Outlined&quot; Margin=&quot;Margin.Dense&quot;&#10;                      Style=&quot;width: 120px; margin-left: 8px;&quot; Error=&quot;@_showError&quot; ErrorText=&quot;@_errorMessage&quot; T=&quot;int&quot;&#10;                      Disabled=&quot;@_solverRunning&quot;/&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;grid-container&quot;&gt;&#10;      &lt;div class=&quot;puzzle-grid-wrapper&quot;&gt;&#10;        &lt;div class=&quot;puzzle-grid&quot;&#10;             style=&quot;grid-template-columns: repeat(@CurrentGrid.Size, 1fr); grid-template-rows: repeat(@CurrentGrid.Size, 1fr);&quot;&gt;&#10;          @for (var i = 0; i &lt; CurrentGrid.Size * CurrentGrid.Size; i++)&#10;          {&#10;            var row = i / CurrentGrid.Size;&#10;            var col = i % CurrentGrid.Size;&#10;            Pos pos = new(row, col);&#10;&#10;            &lt;!-- cell contents --&gt;&#10;            &lt;div class=&quot;@GetCellClasses(pos)&quot; style=&quot;background-color: @GetCellBgColor(pos)&quot;&#10;                 @onclick=&quot;() =&gt; OnCellClick(pos)&quot;&gt;&#10;              @PageGetCellContent?.Invoke(pos)&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- cell borders --&gt;&#10;            @if (PageOnBorderClick == null)&#10;            {&#10;              continue;&#10;            }&#10;&#10;            var borderClass = GetBorderClasses();&#10;            // Horizontal border button (below current cell)&#10;            if (row &lt; CurrentGrid.Size - 1)&#10;            {&#10;              var hTop = GetHorizontalBorderTop(pos);&#10;              var hLeft = GetHorizontalBorderLeft(pos);&#10;              var finalClass = $&quot;{borderClass} horizontal&quot;;&#10;              &lt;div class=&quot;@finalClass&quot; style=&quot;top: @(hTop)px; left: @(hLeft)px;&quot;&#10;                   @onclick=&quot;() =&gt; OnBorderClick(pos, pos.GetNeighbor(Pos.Direction.Down))&quot;&gt;&#10;                &lt;span class=&quot;plus-icon&quot;&gt;+&lt;/span&gt;&#10;              &lt;/div&gt;&#10;            }&#10;&#10;            // Vertical border button (right of current cell)&#10;            if (col &lt; CurrentGrid.Size - 1)&#10;            {&#10;              var vTop = GetVerticalBorderTop(pos);&#10;              var vLeft = GetVerticalBorderLeft(pos);&#10;              var finalClass = $&quot;{borderClass} vertical&quot;;&#10;              &lt;div class=&quot;@finalClass&quot; style=&quot;top: @(vTop)px; left: @(vLeft)px;&quot;&#10;                   @onclick=&quot;() =&gt; OnBorderClick(pos, pos.GetNeighbor(Pos.Direction.Right))&quot;&gt;&#10;                &lt;span class=&quot;plus-icon&quot;&gt;+&lt;/span&gt;&#10;              &lt;/div&gt;&#10;            }&#10;          }&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;debug-message&quot;&gt;&#10;      @_debugMessage&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&#10;&lt;/MudContainer&gt;&#10;&#10;@code {&#10;&#10;  // Dynamic positioning constants (taken from CSS)&#10;  const int CellSize = 60, CellGap = 1, CellSizeWithGap = CellSize + CellGap;&#10;  const int GridPadding = 8;&#10;  const int BorderButtonSize = 24;&#10;&#10;  /// &lt;summary&gt;&#10;  ///     Current puzzle&#10;  /// &lt;/summary&gt;&#10;  [Parameter]&#10;  public Puzzle CurrentPuzzle { get; set; } = null!;&#10;&#10;  /// &lt;summary&gt;&#10;  ///     Grid of the current puzzle&#10;  /// &lt;/summary&gt;&#10;  [Parameter]&#10;  public Grid CurrentGrid { get; set; } = null!;&#10;&#10;  /// &lt;summary&gt;&#10;  ///     Get background color for each cell&#10;  /// &lt;/summary&gt;&#10;  [Parameter]&#10;  public Func&lt;Pos, string&gt;? PageGetCellBgColor { get; set; }&#10;&#10;  /// &lt;summary&gt;&#10;  ///     Get CSS classes for each cell's div element&#10;  /// &lt;/summary&gt;&#10;  [Parameter]&#10;  public Func&lt;Pos, List&lt;string&gt;&gt;? PageGetCellClasses { get; set; }&#10;&#10;  /// &lt;summary&gt;&#10;  ///     Get content for each cell&#10;  /// &lt;/summary&gt;&#10;  [Parameter]&#10;  public Func&lt;Pos, RenderFragment&gt;? PageGetCellContent { get; set; }&#10;&#10;  /// &lt;summary&gt;&#10;  ///     Action to be invoked when a border between two cells is clicked&#10;  /// &lt;/summary&gt;&#10;  [Parameter]&#10;  public Action&lt;Pos, Pos&gt;? PageOnBorderClick { get; set; }&#10;&#10;  /// &lt;summary&gt;&#10;  ///     Action to be invoked when a cell is clicked&#10;  /// &lt;/summary&gt;&#10;  [Parameter]&#10;  public Action&lt;Pos&gt; PageOnCellClick { get; set; } = null!;&#10;&#10;  /// &lt;summary&gt;&#10;  ///     UI input for grid size for resizing the grid&#10;  /// &lt;/summary&gt;&#10;  private int _gridSizeInput = Grid.DefaultSize;&#10;&#10;  /// &lt;summary&gt;&#10;  ///     Error message visibility for grid size input&#10;  /// &lt;/summary&gt;&#10;  private bool _showError;&#10;&#10;  /// &lt;summary&gt;&#10;  ///     Error message content for grid size input, when _showError is true&#10;  /// &lt;/summary&gt;&#10;  private string _errorMessage = string.Empty;&#10;&#10;  /// &lt;summary&gt;&#10;  ///     Debug message displayed at page's bottom&#10;  /// &lt;/summary&gt;&#10;  private string _debugMessage = string.Empty;&#10;&#10;  /// &lt;summary&gt;&#10;  ///     Breadcrumb items for navigation&#10;  /// &lt;/summary&gt;&#10;  private List&lt;BreadcrumbItem&gt; _breadcrumbItems = null!;&#10;&#10;  /// &lt;summary&gt;&#10;  ///     Whether the solver is running, which disables UI interactions&#10;  /// &lt;/summary&gt;&#10;  private bool _solverRunning;&#10;&#10;  protected override void OnInitialized()&#10;  {&#10;    _gridSizeInput = Grid.DefaultSize;&#10;    _breadcrumbItems =&#10;    [&#10;      new BreadcrumbItem(&quot;Home&quot;, &quot;/&quot;, icon: Icons.Material.Filled.Home),&#10;      new BreadcrumbItem(CurrentPuzzle.Name, null, true)&#10;    ];&#10;    Initialize();&#10;  }&#10;&#10;  private void OnResizeGrid()&#10;  {&#10;    if (_solverRunning)&#10;    {&#10;      return;&#10;    }&#10;&#10;    if (_gridSizeInput is &lt; Grid.MinSize or &gt; Grid.MaxSize)&#10;    {&#10;      _showError = true;&#10;      _errorMessage = $&quot;Grid Size should be between {Grid.MinSize} and {Grid.MaxSize}&quot;;&#10;      StateHasChanged();&#10;      return;&#10;    }&#10;&#10;    Initialize();&#10;    CurrentGrid.Reset(_gridSizeInput);&#10;    StateHasChanged();&#10;  }&#10;&#10;  private void Initialize()&#10;  {&#10;    _showError = false;&#10;    _errorMessage = string.Empty;&#10;    _debugMessage = string.Empty;&#10;  }&#10;&#10;  private void OnCellClick(Pos pos)&#10;  {&#10;    if (_solverRunning)&#10;    {&#10;      return;&#10;    }&#10;&#10;    PageOnCellClick(pos);&#10;    StateHasChanged();&#10;  }&#10;&#10;  private void OnBorderClick(Pos pos1, Pos pos2)&#10;  {&#10;    if (_solverRunning)&#10;    {&#10;      return;&#10;    }&#10;&#10;    PageOnBorderClick!.Invoke(pos1, pos2);&#10;    StateHasChanged();&#10;  }&#10;&#10;  private string GetCellBgColor(Pos pos)&#10;  {&#10;    return PageGetCellBgColor?.Invoke(pos) ?? &quot;#FFFFFF&quot;; // Default white background&#10;  }&#10;&#10;  private string GetCellClasses(Pos pos)&#10;  {&#10;    var classes = PageGetCellClasses?.Invoke(pos) ?? [];&#10;    classes.Add(&quot;grid-cell&quot;);&#10;    if (_solverRunning)&#10;    {&#10;      classes.Add(&quot;disabled&quot;);&#10;    }&#10;&#10;    return string.Join(&quot; &quot;, classes);&#10;  }&#10;&#10;  private string GetBorderClasses()&#10;  {&#10;    return _solverRunning ? &quot;border-button disabled&quot; : &quot;border-button&quot;;&#10;  }&#10;&#10;  // Position at the bottom of the current cell&#10;  private static int GetHorizontalBorderTop(Pos pos)&#10;  {&#10;    return GridPadding + (pos.Row + 1) * CellSizeWithGap - BorderButtonSize / 2;&#10;  }&#10;&#10;  // Position at the center of the current cell&#10;  private static int GetHorizontalBorderLeft(Pos pos)&#10;  {&#10;    return GridPadding + pos.Col * CellSizeWithGap + (CellSize - BorderButtonSize) / 2;&#10;  }&#10;&#10;  // Position at the center of the current cell&#10;  private static int GetVerticalBorderTop(Pos pos)&#10;  {&#10;    return GridPadding + pos.Row * CellSizeWithGap + (CellSize - BorderButtonSize) / 2;&#10;  }&#10;&#10;  // Position at the right of the current cell&#10;  private static int GetVerticalBorderLeft(Pos pos)&#10;  {&#10;    return GridPadding + (pos.Col + 1) * CellSizeWithGap - BorderButtonSize / 2;&#10;  }&#10;&#10;  private async Task ValidateAndSolve()&#10;  {&#10;    if (_solverRunning)&#10;    {&#10;      return;&#10;    }&#10;&#10;    _debugMessage = &quot;Validating...&quot;;&#10;    _solverRunning = true;&#10;    StateHasChanged();&#10;    var validationError = await Task.Run(CurrentGrid.Validate);&#10;    if (validationError != null)&#10;    {&#10;      _debugMessage = $&quot;Validation failed: {validationError}&quot;;&#10;      _solverRunning = false;&#10;      StateHasChanged();&#10;      return;&#10;    }&#10;&#10;    _debugMessage = &quot;Validation successful, solving...&quot;;&#10;    StateHasChanged();&#10;&#10;    var solution = await Task.Run(CurrentGrid.Solve);&#10;    // Placeholder: display solution&#10;&#10;    _solverRunning = false;&#10;    StateHasChanged();&#10;  }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="@using LinkedInSolver.Client.Models&#10;&lt;style&gt;&#10;  .grid-container {&#10;    display: flex;&#10;    justify-content: center;&#10;    margin-top: 24px;&#10;  }&#10;&#10;  .puzzle-grid-wrapper {&#10;    position: relative;&#10;    width: fit-content;&#10;  }&#10;&#10;  .puzzle-grid {&#10;    display: grid;&#10;    gap: 1px;&#10;    background-color: #dee2e6;&#10;    border: 2px solid #dee2e6;&#10;    border-radius: 8px;&#10;    padding: 8px;&#10;    width: fit-content;&#10;    aspect-ratio: 1;&#10;  }&#10;&#10;  .grid-cell {&#10;    border: 1px solid #e9ecef;&#10;    cursor: pointer;&#10;    transition: all 0.2s ease;&#10;    border-radius: 2px;&#10;    min-height: 60px;&#10;    min-width: 60px;&#10;    width: 60px;&#10;    height: 60px;&#10;    display: flex;&#10;    align-items: center;&#10;    justify-content: center;&#10;    position: relative;&#10;  }&#10;&#10;  .grid-cell.right-wall {&#10;    border-right: 2px solid #000 !important;&#10;  }&#10;&#10;  .grid-cell.bottom-wall {&#10;    border-bottom: 2px solid #000 !important;&#10;  }&#10;&#10;  .grid-cell.left-wall {&#10;    border-left: 2px solid #000 !important;&#10;  }&#10;&#10;  .grid-cell.top-wall {&#10;    border-top: 2px solid #000 !important;&#10;  }&#10;&#10;  .grid-cell.disabled {&#10;    cursor: not-allowed !important;&#10;    opacity: 0.6;&#10;    pointer-events: none;&#10;  }&#10;&#10;  .cell-number {&#10;    font-size: 20px;&#10;    font-weight: bold;&#10;    color: #333;&#10;    user-select: none;&#10;  }&#10;&#10;  .cell-number.first-last {&#10;    color: #dc3545 !important;&#10;  }&#10;&#10;  .border-button {&#10;    position: absolute;&#10;    width: 24px;&#10;    height: 24px;&#10;    background-color: #90ee90;&#10;    border: 2px solid #90ee90;&#10;    border-radius: 50%;&#10;    display: flex;&#10;    align-items: center;&#10;    justify-content: center;&#10;    cursor: pointer;&#10;    opacity: 0;&#10;    transition: opacity 0.2s ease;&#10;    z-index: 10;&#10;  }&#10;&#10;  .border-button:hover {&#10;    opacity: 1 !important;&#10;    background-color: #7fdd7f;&#10;  }&#10;&#10;  .border-button.disabled {&#10;    cursor: not-allowed !important;&#10;    opacity: 0 !important;&#10;    pointer-events: none;&#10;  }&#10;&#10;  .border-button.permanent {&#10;    opacity: 1 !important;&#10;    background-color: #ffffff;&#10;    border: 2px solid #333;&#10;    color: #333;&#10;    font-weight: bold;&#10;    font-size: 16px;&#10;  }&#10;&#10;  .border-button.permanent:hover {&#10;    background-color: #f0f0f0;&#10;  }&#10;&#10;  .plus-icon {&#10;    color: #a9a9a9;&#10;    font-size: 16px;&#10;    font-weight: bold;&#10;    line-height: 1;&#10;  }&#10;&#10;  .debug-message {&#10;    margin-top: 16px;&#10;    padding: 8px;&#10;    background-color: #f8f9fa;&#10;    border: 1px solid #dee2e6;&#10;    border-radius: 4px;&#10;    font-family: monospace;&#10;    text-align: center;&#10;  }&#10;&#10;  .grid-cell:hover {&#10;    background-color: #f8f9fa;&#10;    transform: scale(0.95);&#10;  }&#10;&#10;  .grid-cell.active {&#10;    background-color: #dc3545;&#10;    border-color: #b02a37;&#10;  }&#10;&#10;  .grid-cell.active:hover {&#10;    background-color: #c82333;&#10;  }&#10;&#10;  .puzzle-content {&#10;    transition: opacity 0.3s ease;&#10;  }&#10;&#10;  .puzzle-content.disabled {&#10;    opacity: 0.6;&#10;    pointer-events: none;&#10;  }&#10;&lt;/style&gt;&#10;&#10;&lt;PageTitle&gt;@CurrentPuzzle.Name - LinkedIn Puzzles&lt;/PageTitle&gt;&#10;&#10;&lt;MudContainer MaxWidth=&quot;MaxWidth.Large&quot; Class=&quot;mt-4&quot;&gt;&#10;&#10;  &lt;MudBreadcrumbs Items=&quot;_breadcrumbItems&quot; Class=&quot;mb-4&quot;/&gt;&#10;&#10;  &lt;div class=&quot;puzzle-content @(_solverRunning ? &quot;disabled&quot; : &quot;&quot;)&quot;&gt;&#10;    &lt;div class=&quot;d-flex align-center mb-4&quot;&gt;&#10;      &lt;img src=&quot;@CurrentPuzzle.Icon&quot; alt=&quot;@CurrentPuzzle.Name&quot;&#10;           style=&quot;width: 48px; height: 48px; margin-right: 16px;&quot;/&gt;&#10;      &lt;MudText Typo=&quot;Typo.h4&quot; GutterBottom=&quot;false&quot;&gt;&#10;        @CurrentPuzzle.Name&#10;      &lt;/MudText&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;d-flex justify-center mb-4&quot;&gt;&#10;      &lt;div class=&quot;d-flex align-center&quot;&gt;&#10;        &lt;MudButton Variant=&quot;Variant.Filled&quot; Color=&quot;Color.Success&quot; @onclick=&quot;ValidateAndSolve&quot;&#10;                   Disabled=&quot;@_solverRunning&quot; Style=&quot;margin: 8px&quot;&gt;&#10;          @if (_solverRunning)&#10;          {&#10;            &lt;MudProgressCircular Color=&quot;Color.Secondary&quot; Size=&quot;Size.Small&quot; Indeterminate=&quot;true&quot;/&gt;&#10;            &lt;span style=&quot;margin-left: 8px;&quot;&gt;Processing...&lt;/span&gt;&#10;          }&#10;          else&#10;          {&#10;            &lt;span&gt;Validate and Solve&lt;/span&gt;&#10;          }&#10;        &lt;/MudButton&gt;&#10;        &lt;MudButton Variant=&quot;Variant.Filled&quot; Color=&quot;Color.Primary&quot; @onclick=&quot;OnResizeGrid&quot; Disabled=&quot;@_solverRunning&quot;&#10;                   Style=&quot;margin: 8px&quot;&gt;&#10;          Reset Grid&#10;        &lt;/MudButton&gt;&#10;        &lt;MudTextField @bind-Value=&quot;_gridSizeInput&quot; Label=&quot;Grid Size&quot; Variant=&quot;Variant.Outlined&quot; Margin=&quot;Margin.Dense&quot;&#10;                      Style=&quot;width: 120px; margin-left: 8px;&quot; Error=&quot;@_showError&quot; ErrorText=&quot;@_errorMessage&quot; T=&quot;int&quot;&#10;                      Disabled=&quot;@_solverRunning&quot;/&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;grid-container&quot;&gt;&#10;      &lt;div class=&quot;puzzle-grid-wrapper&quot;&gt;&#10;        &lt;div class=&quot;puzzle-grid&quot;&#10;             style=&quot;grid-template-columns: repeat(@CurrentGrid.Size, 1fr); grid-template-rows: repeat(@CurrentGrid.Size, 1fr);&quot;&gt;&#10;          @for (var i = 0; i &lt; CurrentGrid.Size * CurrentGrid.Size; i++)&#10;          {&#10;            var row = i / CurrentGrid.Size;&#10;            var col = i % CurrentGrid.Size;&#10;            Pos pos = new(row, col);&#10;&#10;            &lt;!-- cell contents --&gt;&#10;            &lt;div class=&quot;@GetCellClasses(pos)&quot; style=&quot;background-color: @GetCellBgColor(pos)&quot;&#10;                 @onclick=&quot;() =&gt; OnCellClick(pos)&quot;&gt;&#10;              @PageGetCellContent?.Invoke(pos)&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- cell borders --&gt;&#10;            @if (PageOnBorderClick == null)&#10;            {&#10;              continue;&#10;            }&#10;&#10;            // Horizontal border button (below current cell)&#10;            if (row &lt; CurrentGrid.Size - 1)&#10;            {&#10;              var downPos = pos.GetNeighbor(Pos.Direction.Down);&#10;              var borderContent = PageGetBorderContent?.Invoke(pos, downPos);&#10;              var customBorderClasses = PageGetBorderClasses?.Invoke(pos, downPos) ?? [];&#10;              var hTop = GetHorizontalBorderTop(pos);&#10;              var hLeft = GetHorizontalBorderLeft(pos);&#10;              &#10;              var borderClasses = GetBorderClasses(pos, downPos, customBorderClasses);&#10;              var finalClass = $&quot;{borderClasses} horizontal&quot;;&#10;              &#10;              &lt;div class=&quot;@finalClass&quot; style=&quot;top: @(hTop)px; left: @(hLeft)px;&quot;&#10;                   @onclick=&quot;() =&gt; OnBorderClick(pos, downPos)&quot;&gt;&#10;                @if (borderContent != null)&#10;                {&#10;                  &lt;span&gt;@borderContent&lt;/span&gt;&#10;                }&#10;                else&#10;                {&#10;                  &lt;span class=&quot;plus-icon&quot;&gt;+&lt;/span&gt;&#10;                }&#10;              &lt;/div&gt;&#10;            }&#10;&#10;            // Vertical border button (right of current cell)&#10;            if (col &lt; CurrentGrid.Size - 1)&#10;            {&#10;              var rightPos = pos.GetNeighbor(Pos.Direction.Right);&#10;              var borderContent = PageGetBorderContent?.Invoke(pos, rightPos);&#10;              var customBorderClasses = PageGetBorderClasses?.Invoke(pos, rightPos) ?? [];&#10;              var vTop = GetVerticalBorderTop(pos);&#10;              var vLeft = GetVerticalBorderLeft(pos);&#10;              &#10;              var borderClasses = GetBorderClasses(pos, rightPos, customBorderClasses);&#10;              var finalClass = $&quot;{borderClasses} vertical&quot;;&#10;              &#10;              &lt;div class=&quot;@finalClass&quot; style=&quot;top: @(vTop)px; left: @(vLeft)px;&quot;&#10;                   @onclick=&quot;() =&gt; OnBorderClick(pos, rightPos)&quot;&gt;&#10;                @if (borderContent != null)&#10;                {&#10;                  &lt;span&gt;@borderContent&lt;/span&gt;&#10;                }&#10;                else&#10;                {&#10;                  &lt;span class=&quot;plus-icon&quot;&gt;+&lt;/span&gt;&#10;                }&#10;              &lt;/div&gt;&#10;            }&#10;          }&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;debug-message&quot;&gt;&#10;      @_debugMessage&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&#10;&lt;/MudContainer&gt;&#10;&#10;@code {&#10;&#10;  // Dynamic positioning constants (taken from CSS)&#10;  const int CellSize = 60, CellGap = 1, CellSizeWithGap = CellSize + CellGap;&#10;  const int GridPadding = 8;&#10;  const int BorderButtonSize = 24;&#10;&#10;  /// &lt;summary&gt;&#10;  ///     Current puzzle&#10;  /// &lt;/summary&gt;&#10;  [Parameter]&#10;  public Puzzle CurrentPuzzle { get; set; } = null!;&#10;&#10;  /// &lt;summary&gt;&#10;  ///     Grid of the current puzzle&#10;  /// &lt;/summary&gt;&#10;  [Parameter]&#10;  public Grid CurrentGrid { get; set; } = null!;&#10;&#10;  /// &lt;summary&gt;&#10;  ///     Get background color for each cell&#10;  /// &lt;/summary&gt;&#10;  [Parameter]&#10;  public Func&lt;Pos, string&gt;? PageGetCellBgColor { get; set; }&#10;&#10;  /// &lt;summary&gt;&#10;  ///     Get CSS classes for each cell's div element&#10;  /// &lt;/summary&gt;&#10;  [Parameter]&#10;  public Func&lt;Pos, List&lt;string&gt;&gt;? PageGetCellClasses { get; set; }&#10;&#10;  /// &lt;summary&gt;&#10;  ///     Get content for each cell&#10;  /// &lt;/summary&gt;&#10;  [Parameter]&#10;  public Func&lt;Pos, RenderFragment&gt;? PageGetCellContent { get; set; }&#10;&#10;  /// &lt;summary&gt;&#10;  ///     Action to be invoked when a border between two cells is clicked&#10;  /// &lt;/summary&gt;&#10;  [Parameter]&#10;  public Action&lt;Pos, Pos&gt;? PageOnBorderClick { get; set; }&#10;&#10;  /// &lt;summary&gt;&#10;  ///     Action to be invoked when a cell is clicked&#10;  /// &lt;/summary&gt;&#10;  [Parameter]&#10;  public Action&lt;Pos&gt; PageOnCellClick { get; set; } = null!;&#10;&#10;  /// &lt;summary&gt;&#10;  ///     Get border content for display (e.g., &quot;=&quot;, &quot;×&quot;, or null for hover)&#10;  /// &lt;/summary&gt;&#10;  [Parameter]&#10;  public Func&lt;Pos, Pos, string?&gt;? PageGetBorderContent { get; set; }&#10;&#10;  /// &lt;summary&gt;&#10;  ///     Get border CSS classes&#10;  /// &lt;/summary&gt;&#10;  [Parameter]&#10;  public Func&lt;Pos, Pos, List&lt;string&gt;&gt;? PageGetBorderClasses { get; set; }&#10;&#10;  /// &lt;summary&gt;&#10;  ///     UI input for grid size for resizing the grid&#10;  /// &lt;/summary&gt;&#10;  private int _gridSizeInput = Grid.DefaultSize;&#10;&#10;  /// &lt;summary&gt;&#10;  ///     Error message visibility for grid size input&#10;  /// &lt;/summary&gt;&#10;  private bool _showError;&#10;&#10;  /// &lt;summary&gt;&#10;  ///     Error message content for grid size input, when _showError is true&#10;  /// &lt;/summary&gt;&#10;  private string _errorMessage = string.Empty;&#10;&#10;  /// &lt;summary&gt;&#10;  ///     Debug message displayed at page's bottom&#10;  /// &lt;/summary&gt;&#10;  private string _debugMessage = string.Empty;&#10;&#10;  /// &lt;summary&gt;&#10;  ///     Breadcrumb items for navigation&#10;  /// &lt;/summary&gt;&#10;  private List&lt;BreadcrumbItem&gt; _breadcrumbItems = null!;&#10;&#10;  /// &lt;summary&gt;&#10;  ///     Whether the solver is running, which disables UI interactions&#10;  /// &lt;/summary&gt;&#10;  private bool _solverRunning;&#10;&#10;  protected override void OnInitialized()&#10;  {&#10;    _gridSizeInput = Grid.DefaultSize;&#10;    _breadcrumbItems =&#10;    [&#10;      new BreadcrumbItem(&quot;Home&quot;, &quot;/&quot;, icon: Icons.Material.Filled.Home),&#10;      new BreadcrumbItem(CurrentPuzzle.Name, null, true)&#10;    ];&#10;    Initialize();&#10;  }&#10;&#10;  private void OnResizeGrid()&#10;  {&#10;    if (_solverRunning)&#10;    {&#10;      return;&#10;    }&#10;&#10;    if (_gridSizeInput is &lt; Grid.MinSize or &gt; Grid.MaxSize)&#10;    {&#10;      _showError = true;&#10;      _errorMessage = $&quot;Grid Size should be between {Grid.MinSize} and {Grid.MaxSize}&quot;;&#10;      StateHasChanged();&#10;      return;&#10;    }&#10;&#10;    Initialize();&#10;    CurrentGrid.Reset(_gridSizeInput);&#10;    StateHasChanged();&#10;  }&#10;&#10;  private void Initialize()&#10;  {&#10;    _showError = false;&#10;    _errorMessage = string.Empty;&#10;    _debugMessage = string.Empty;&#10;  }&#10;&#10;  private void OnCellClick(Pos pos)&#10;  {&#10;    if (_solverRunning)&#10;    {&#10;      return;&#10;    }&#10;&#10;    PageOnCellClick(pos);&#10;    StateHasChanged();&#10;  }&#10;&#10;  private void OnBorderClick(Pos pos1, Pos pos2)&#10;  {&#10;    if (_solverRunning)&#10;    {&#10;      return;&#10;    }&#10;&#10;    PageOnBorderClick!.Invoke(pos1, pos2);&#10;    StateHasChanged();&#10;  }&#10;&#10;  private string GetCellBgColor(Pos pos)&#10;  {&#10;    return PageGetCellBgColor?.Invoke(pos) ?? &quot;#FFFFFF&quot;; // Default white background&#10;  }&#10;&#10;  private string GetCellClasses(Pos pos)&#10;  {&#10;    var classes = PageGetCellClasses?.Invoke(pos) ?? [];&#10;    classes.Add(&quot;grid-cell&quot;);&#10;    if (_solverRunning)&#10;    {&#10;      classes.Add(&quot;disabled&quot;);&#10;    }&#10;&#10;    return string.Join(&quot; &quot;, classes);&#10;  }&#10;&#10;  private string GetBorderClasses(Pos pos1, Pos pos2, List&lt;string&gt; customClasses)&#10;  {&#10;    var baseClass = _solverRunning ? &quot;border-button disabled&quot; : &quot;border-button&quot;;&#10;    return string.Join(&quot; &quot;, customClasses.Prepend(baseClass));&#10;  }&#10;&#10;  // Position at the bottom of the current cell&#10;  private static int GetHorizontalBorderTop(Pos pos)&#10;  {&#10;    return GridPadding + (pos.Row + 1) * CellSizeWithGap - BorderButtonSize / 2;&#10;  }&#10;&#10;  // Position at the center of the current cell&#10;  private static int GetHorizontalBorderLeft(Pos pos)&#10;  {&#10;    return GridPadding + pos.Col * CellSizeWithGap + (CellSize - BorderButtonSize) / 2;&#10;  }&#10;&#10;  // Position at the center of the current cell&#10;  private static int GetVerticalBorderTop(Pos pos)&#10;  {&#10;    return GridPadding + pos.Row * CellSizeWithGap + (CellSize - BorderButtonSize) / 2;&#10;  }&#10;&#10;  // Position at the right of the current cell&#10;  private static int GetVerticalBorderLeft(Pos pos)&#10;  {&#10;    return GridPadding + (pos.Col + 1) * CellSizeWithGap - BorderButtonSize / 2;&#10;  }&#10;&#10;  private async Task ValidateAndSolve()&#10;  {&#10;    if (_solverRunning)&#10;    {&#10;      return;&#10;    }&#10;&#10;    _debugMessage = &quot;Validating...&quot;;&#10;    _solverRunning = true;&#10;    StateHasChanged();&#10;    var validationError = await Task.Run(CurrentGrid.Validate);&#10;    if (validationError != null)&#10;    {&#10;      _debugMessage = $&quot;Validation failed: {validationError}&quot;;&#10;      _solverRunning = false;&#10;      StateHasChanged();&#10;      return;&#10;    }&#10;&#10;    _debugMessage = &quot;Validation successful, solving...&quot;;&#10;    StateHasChanged();&#10;&#10;    var solution = await Task.Run(CurrentGrid.Solve);&#10;    // Placeholder: display solution&#10;&#10;    _solverRunning = false;&#10;    StateHasChanged();&#10;  }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/LinkedInSolver.Client/Pages/Tango.razor">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/LinkedInSolver.Client/Pages/Tango.razor" />
              <option name="originalContent" value="@page &quot;/tango&quot;&#10;@using LinkedInSolver.Client.Components&#10;@using LinkedInSolver.Client.Models&#10;&#10;&lt;style&gt;&#10;    .input-cell {&#10;        text-align: center;&#10;        font-size: 32px;&#10;    }&#10;&lt;/style&gt;&#10;&#10;&lt;PuzzleGrid CurrentPuzzle=&quot;Puzzle&quot; CurrentGrid=&quot;_grid&quot;&#10;            PageGetCellBgColor=&quot;GetCellBgColor&quot; PageGetCellContent=&quot;GetCellContent&quot;&#10;            PageOnCellClick=&quot;OnCellClick&quot; PageOnBorderClick=&quot;OnBorderClick&quot;/&gt;&#10;&#10;@code {&#10;    private static readonly Puzzle Puzzle = Puzzle.GetPuzzle(&quot;Tango&quot;);&#10;&#10;    private readonly TangoGrid _grid = new(Grid.DefaultSize);&#10;&#10;    private string GetCellBgColor(Pos pos)&#10;    {&#10;        return _grid.GetCellType(pos) == TangoGrid.CellType.Empty ? &quot;#FFFFFF&quot; : &quot;#EEEEEE&quot;;&#10;    }&#10;&#10;    private RenderFragment? GetCellContent(Pos pos)&#10;    {&#10;        return _grid.GetCellType(pos) switch&#10;        {&#10;            TangoGrid.CellType.Empty =&gt; null,&#10;            TangoGrid.CellType.Sun =&gt; @&lt;span class=&quot;input-cell&quot;&gt;&lt;/span&gt;,&#10;            TangoGrid.CellType.Moon =&gt; @&lt;span class=&quot;input-cell&quot;&gt;⏾&lt;/span&gt;,&#10;            _ =&gt; throw new InvalidOperationException(&quot;Unexpected cell type&quot;)&#10;        };&#10;    }&#10;&#10;    private void OnCellClick(Pos pos)&#10;    {&#10;        var nextCellType = _grid.GetCellType(pos) switch&#10;        {&#10;            TangoGrid.CellType.Empty =&gt; TangoGrid.CellType.Sun,&#10;            TangoGrid.CellType.Sun =&gt; TangoGrid.CellType.Moon,&#10;            TangoGrid.CellType.Moon =&gt; TangoGrid.CellType.Empty,&#10;            _ =&gt; throw new InvalidOperationException(&quot;Unexpected cell type&quot;)&#10;        };&#10;        _grid.SetCellType(pos, nextCellType);&#10;    }&#10;&#10;    private void OnBorderClick(Pos pos1, Pos pos2)&#10;    {&#10;        var nextBorderType = _grid.GetBorderType(pos1, pos2) switch&#10;        {&#10;            TangoGrid.BorderType.None =&gt; TangoGrid.BorderType.Equal,&#10;            TangoGrid.BorderType.Equal =&gt; TangoGrid.BorderType.Opposite,&#10;            TangoGrid.BorderType.Opposite =&gt; TangoGrid.BorderType.None,&#10;            _ =&gt; throw new InvalidOperationException(&quot;Unexpected border type&quot;)&#10;        };&#10;        _grid.SetBorderType(pos1, pos2, nextBorderType);&#10;    }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="@page &quot;/tango&quot;&#10;@using LinkedInSolver.Client.Components&#10;@using LinkedInSolver.Client.Models&#10;&#10;&lt;style&gt;&#10;    .input-cell {&#10;        text-align: center;&#10;        font-size: 32px;&#10;    }&#10;&lt;/style&gt;&#10;&#10;&lt;PuzzleGrid CurrentPuzzle=&quot;Puzzle&quot; CurrentGrid=&quot;_grid&quot;&#10;            PageGetCellBgColor=&quot;GetCellBgColor&quot; PageGetCellContent=&quot;GetCellContent&quot;&#10;            PageOnCellClick=&quot;OnCellClick&quot; PageOnBorderClick=&quot;OnBorderClick&quot;&#10;            PageGetBorderContent=&quot;GetBorderContent&quot; PageGetBorderClasses=&quot;GetBorderClasses&quot;/&gt;&#10;&#10;@code {&#10;    private static readonly Puzzle Puzzle = Puzzle.GetPuzzle(&quot;Tango&quot;);&#10;&#10;    private readonly TangoGrid _grid = new(Grid.DefaultSize);&#10;&#10;    private string GetCellBgColor(Pos pos)&#10;    {&#10;        return _grid.GetCellType(pos) == TangoGrid.CellType.Empty ? &quot;#FFFFFF&quot; : &quot;#EEEEEE&quot;;&#10;    }&#10;&#10;    private RenderFragment? GetCellContent(Pos pos)&#10;    {&#10;        return _grid.GetCellType(pos) switch&#10;        {&#10;            TangoGrid.CellType.Empty =&gt; null,&#10;            TangoGrid.CellType.Sun =&gt; @&lt;span class=&quot;input-cell&quot;&gt;&lt;/span&gt;,&#10;            TangoGrid.CellType.Moon =&gt; @&lt;span class=&quot;input-cell&quot;&gt;⏾&lt;/span&gt;,&#10;            _ =&gt; throw new InvalidOperationException(&quot;Unexpected cell type&quot;)&#10;        };&#10;    }&#10;&#10;    private void OnCellClick(Pos pos)&#10;    {&#10;        var nextCellType = _grid.GetCellType(pos) switch&#10;        {&#10;            TangoGrid.CellType.Empty =&gt; TangoGrid.CellType.Sun,&#10;            TangoGrid.CellType.Sun =&gt; TangoGrid.CellType.Moon,&#10;            TangoGrid.CellType.Moon =&gt; TangoGrid.CellType.Empty,&#10;            _ =&gt; throw new InvalidOperationException(&quot;Unexpected cell type&quot;)&#10;        };&#10;        _grid.SetCellType(pos, nextCellType);&#10;    }&#10;&#10;    private void OnBorderClick(Pos pos1, Pos pos2)&#10;    {&#10;        var nextBorderType = _grid.GetBorderType(pos1, pos2) switch&#10;        {&#10;            TangoGrid.BorderType.None =&gt; TangoGrid.BorderType.Equal,&#10;            TangoGrid.BorderType.Equal =&gt; TangoGrid.BorderType.Opposite,&#10;            TangoGrid.BorderType.Opposite =&gt; TangoGrid.BorderType.None,&#10;            _ =&gt; throw new InvalidOperationException(&quot;Unexpected border type&quot;)&#10;        };&#10;        _grid.SetBorderType(pos1, pos2, nextBorderType);&#10;    }&#10;&#10;    private string? GetBorderContent(Pos pos1, Pos pos2)&#10;    {&#10;        return _grid.GetBorderType(pos1, pos2) switch&#10;        {&#10;            TangoGrid.BorderType.None =&gt; null, // Show hover &quot;+&quot; icon&#10;            TangoGrid.BorderType.Equal =&gt; &quot;=&quot;, // Show permanent equal sign&#10;            TangoGrid.BorderType.Opposite =&gt; &quot;×&quot;, // Show permanent x character&#10;            _ =&gt; throw new InvalidOperationException(&quot;Unexpected border type&quot;)&#10;        };&#10;    }&#10;&#10;    private List&lt;string&gt; GetBorderClasses(Pos pos1, Pos pos2)&#10;    {&#10;        var borderType = _grid.GetBorderType(pos1, pos2);&#10;        return borderType != TangoGrid.BorderType.None ? [&quot;permanent&quot;] : [];&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/LinkedInSolver.Client/wwwroot/keyboard-handler.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/LinkedInSolver.Client/wwwroot/keyboard-handler.js" />
              <option name="updatedContent" value="window.addKeydownListener = (dotNetHelper) =&gt; {&#10;    const handleKeydown = (event) =&gt; {&#10;        // Only handle number keys (0-9) and ignore if any modifier keys are pressed&#10;        if (event.key &gt;= '0' &amp;&amp; event.key &lt;= '9' &amp;&amp; !event.ctrlKey &amp;&amp; !event.altKey &amp;&amp; !event.metaKey) {&#10;            // Prevent default behavior for number keys&#10;            event.preventDefault();&#10;            &#10;            // Call the C# method&#10;            dotNetHelper.invokeMethodAsync('HandleKeyPress', event.key);&#10;        }&#10;    };&#10;&#10;    // Add event listener to document&#10;    document.addEventListener('keydown', handleKeydown);&#10;    &#10;    // Store the handler so it can be removed later if needed&#10;    window.currentKeydownHandler = handleKeydown;&#10;};&#10;&#10;window.removeKeydownListener = () =&gt; {&#10;    if (window.currentKeydownHandler) {&#10;        document.removeEventListener('keydown', window.currentKeydownHandler);&#10;        window.currentKeydownHandler = null;&#10;    }&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>